### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Attribute {
  id: ID!
  key: String!
  products(after: String, before: String, first: Int, last: Int, skip: Int): [Product!]
  value: String!
}

input AttributeCreateManyWithoutAttributesInput {
  connect: [AttributeWhereUniqueInput!]
  create: [AttributeCreateWithoutProductsInput!]
}

input AttributeCreateWithoutProductsInput {
  id: ID
  key: String!
  value: String!
}

type AttributePayload {
  name: String!
  values: [AttributeValue!]!
}

type AttributeValue {
  id: ID!
  value: String!
}

input AttributeWhereUniqueInput {
  id: ID
}

type Brand {
  id: ID!
  name: String!
  products(after: String, before: String, first: Int, last: Int, skip: Int): [Product!]
}

input BrandCreateOneWithoutBrandInput {
  connect: BrandWhereUniqueInput
  create: BrandCreateWithoutProductsInput
}

input BrandCreateWithoutProductsInput {
  id: ID
  name: String!
}

input BrandWhereUniqueInput {
  id: ID
}

type Collection {
  attributes: [AttributePayload!]!
  brands: [Brand!]!
  id: ID!
  name: String!
  options: [Option!]!
  products(attributesIds: [ID!], brandsIds: [ID!], first: Int, last: Int, optionsValuesIds: [ID!]): [Product!]!
}

input CollectionCreateManyWithoutCollectionsInput {
  connect: [CollectionWhereUniqueInput!]
  create: [CollectionCreateWithoutProductsInput!]
}

input CollectionCreateWithoutProductsInput {
  id: ID
  name: String!
  rules: CollectionRuleSetCreateOneWithoutRulesInput
}

input CollectionInput {
  name: String!
  productsIds: [String!]
  ruleSet: CollectionRuleSetInput
}

input CollectionRuleCreateManyWithoutRulesInput {
  connect: [CollectionRuleWhereUniqueInput!]
  create: [CollectionRuleCreateWithoutCollectionRuleSetInput!]
}

input CollectionRuleCreateWithoutCollectionRuleSetInput {
  field: CollectionRuleField!
  id: ID
  relation: CollectionRuleRelation!
  value: String!
}

enum CollectionRuleField {
  PRICE
  TITLE
  TYPE
}

enum CollectionRuleRelation {
  CONTAINS
  ENDS_WITH
  EQUALS
  GREATER_THAN
  LESS_THAN
  NOT_CONTAINS
  NOT_EQUALS
  STARTS_WITH
}

input CollectionRuleSetCreateOneWithoutRulesInput {
  connect: CollectionRuleSetWhereUniqueInput
  create: CollectionRuleSetCreateWithoutCollectionInput
}

input CollectionRuleSetCreateWithoutCollectionInput {
  appliesDisjunctively: Boolean!
  id: ID
  rules: CollectionRuleCreateManyWithoutRulesInput
}

input CollectionRuleSetInput {
  applyDisjunctively: Boolean!
  rules: [RulesInput!]!
}

input CollectionRuleSetWhereUniqueInput {
  id: ID
}

input CollectionRuleWhereUniqueInput {
  id: ID
}

input CollectionWhereUniqueInput {
  id: ID
}

input CreateProductInput {
  attributesIds: [UniqueInput!]!
  brand: UniqueInput!
  name: String!
  slug: String!
  variants: [CreateVariantInput!]!
}

input CreateVariantInput {
  availableForSale: Boolean!
  optionsValueIds: [UniqueInput!]!
  price: Int!
}

type Image {
  id: ID!
  url: String!
}

input ImageCreateManyWithoutImagesInput {
  connect: [ImageWhereUniqueInput!]
  create: [ImageCreateWithoutVariantInput!]
}

input ImageCreateOneWithoutThumbnailInput {
  connect: ImageWhereUniqueInput
  create: ImageCreateWithoutProductInput
}

input ImageCreateWithoutProductInput {
  id: ID
  url: String!
  variant: VariantCreateOneWithoutVariantInput
}

input ImageCreateWithoutVariantInput {
  id: ID
  product: ProductCreateOneWithoutProductInput
  url: String!
}

input ImageWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  collectionAddProducts(collectionId: ID!, productIds: [ID!]!): Collection!
  collectionCreate(collection: CollectionInput!): Collection!
  collectionRemoveProducts(collectionId: ID!, productIds: [ID!]!): Collection!
  collectionUpdate(collection: CollectionInput!, id: ID!): Collection!
  createOneProduct(data: ProductCreateInput!): Product!
  productCreate(data: CreateProductInput!): Product!
  productDelete(productId: ID!): Product!
  productUpdate(data: UpdateProductInput!): Product!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Option {
  id: ID!
  isColor: Boolean
  name: String!
  values(after: String, before: String, first: Int, last: Int, skip: Int): [OptionValue!]
}

input OptionCreateOneWithoutOptionInput {
  connect: OptionWhereUniqueInput
  create: OptionCreateWithoutValuesInput
}

input OptionCreateWithoutValuesInput {
  id: ID
  isColor: Boolean
  name: String!
}

type OptionValue {
  id: ID!
  name: String!
  option: Option!
  variant: Variant
}

input OptionValueCreateManyWithoutOptionValuesInput {
  connect: [OptionValueWhereUniqueInput!]
  create: [OptionValueCreateWithoutVariantInput!]
}

input OptionValueCreateWithoutVariantInput {
  id: ID
  name: String!
  option: OptionCreateOneWithoutOptionInput!
}

input OptionValueWhereUniqueInput {
  id: ID
}

input OptionWhereUniqueInput {
  id: ID
}

type Product {
  attributes(after: String, before: String, first: Int, last: Int, skip: Int): [Attribute!]
  brand: Brand!
  id: ID!
  name: String!
  slug: String!
  thumbnail: Image
  variants(after: String, before: String, first: Int, last: Int, skip: Int): [Variant!]
}

input ProductCreateInput {
  attributes: AttributeCreateManyWithoutAttributesInput
  brand: BrandCreateOneWithoutBrandInput!
  collections: CollectionCreateManyWithoutCollectionsInput
  description: String!
  id: ID
  name: String!
  slug: String!
  thumbnail: ImageCreateOneWithoutThumbnailInput
  type: ProductTypeCreateOneWithoutTypeInput
  variants: VariantCreateManyWithoutVariantsInput
}

input ProductCreateOneWithoutProductInput {
  connect: ProductWhereUniqueInput
  create: ProductCreateWithoutVariantsInput
}

input ProductCreateWithoutVariantsInput {
  attributes: AttributeCreateManyWithoutAttributesInput
  brand: BrandCreateOneWithoutBrandInput!
  collections: CollectionCreateManyWithoutCollectionsInput
  description: String!
  id: ID
  name: String!
  slug: String!
  thumbnail: ImageCreateOneWithoutThumbnailInput
  type: ProductTypeCreateOneWithoutTypeInput
}

input ProductTypeCreateOneWithoutTypeInput {
  connect: ProductTypeWhereUniqueInput
  create: ProductTypeCreateWithoutProductInput
}

input ProductTypeCreateWithoutProductInput {
  id: ID
  name: String!
}

input ProductTypeWhereUniqueInput {
  id: ID
}

input ProductWhereUniqueInput {
  id: ID
  slug: String
}

type Query {
  brands(after: String, before: String, first: Int, last: Int, skip: Int): [Brand!]
  collection(collectionId: ID!): Collection!
  collections(after: String, before: String, first: Int, last: Int, skip: Int): [Collection!]
  findManyVariant(after: String, before: String, first: Int, last: Int, skip: Int, where: QueryFindManyVariantWhereInput): [Variant!]
  findOneVariant(where: VariantWhereUniqueInput!): Variant
  options(after: String, before: String, first: Int, last: Int, skip: Int): [Option!]
  product(where: ProductWhereUniqueInput!): Product
  products(after: String, before: String, first: Int, last: Int, skip: Int): [Product!]
}

input QueryFindManyVariantFilter {
  every: QueryFindManyVariantWhereInput
  none: QueryFindManyVariantWhereInput
  some: QueryFindManyVariantWhereInput
}

input QueryFindManyVariantWhereInput {
  AND: [QueryFindManyVariantWhereInput!]
  availableForSale: QueryFindManyVariantFilter
  id: StringFilter
  images: QueryFindManyVariantFilter
  NOT: [QueryFindManyVariantWhereInput!]
  optionValues: QueryFindManyVariantFilter
  OR: [QueryFindManyVariantWhereInput!]
  price: IntFilter
  product: QueryFindManyVariantWhereInput
  sku: NullableStringFilter
}

input RulesInput {
  field: CollectionRuleField!
  relation: CollectionRuleRelation!
  value: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input UniqueInput {
  id: ID!
}

input UpdateProductInput {
  attributesIds: [UniqueInput!]!
  brand: UniqueInput!
  id: ID!
  name: String!
  variants: [UpdateVariantInput!]!
}

input UpdateVariantInput {
  availableForSale: Boolean!
  id: ID!
  optionsValueIds: [UniqueInput!]!
  price: Int!
}

type Variant {
  availableForSale: Boolean
  id: ID!
  images(after: String, before: String, first: Int, last: Int, skip: Int): [Image!]
  optionValues(after: String, before: String, first: Int, last: Int, skip: Int): [OptionValue!]
  price: Int!
  product: Product
  sku: String
}

input VariantCreateManyWithoutVariantsInput {
  connect: [VariantWhereUniqueInput!]
  create: [VariantCreateWithoutProductInput!]
}

input VariantCreateOneWithoutVariantInput {
  connect: VariantWhereUniqueInput
  create: VariantCreateWithoutImagesInput
}

input VariantCreateWithoutImagesInput {
  availableForSale: Boolean
  id: ID
  optionValues: OptionValueCreateManyWithoutOptionValuesInput
  price: Int!
  product: ProductCreateOneWithoutProductInput
  sku: String
}

input VariantCreateWithoutProductInput {
  availableForSale: Boolean
  id: ID
  images: ImageCreateManyWithoutImagesInput
  optionValues: OptionValueCreateManyWithoutOptionValuesInput
  price: Int!
  sku: String
}

input VariantWhereUniqueInput {
  id: ID
}
