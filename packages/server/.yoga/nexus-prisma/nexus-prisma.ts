/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Collection: CollectionObject
      CollectionRuleSet: CollectionRuleSetObject
      CollectionRule: CollectionRuleObject
      Product: ProductObject
      Brand: BrandObject
      ProductType: ProductTypeObject
      Image: ImageObject
      Variant: VariantObject
      OptionValue: OptionValueObject
      Option: OptionObject
      Attribute: AttributeObject
      CollectionConnection: CollectionConnectionObject
      PageInfo: PageInfoObject
      CollectionEdge: CollectionEdgeObject
      AggregateCollection: AggregateCollectionObject
      CollectionRuleSetConnection: CollectionRuleSetConnectionObject
      CollectionRuleSetEdge: CollectionRuleSetEdgeObject
      AggregateCollectionRuleSet: AggregateCollectionRuleSetObject
      CollectionRuleConnection: CollectionRuleConnectionObject
      CollectionRuleEdge: CollectionRuleEdgeObject
      AggregateCollectionRule: AggregateCollectionRuleObject
      ProductTypeConnection: ProductTypeConnectionObject
      ProductTypeEdge: ProductTypeEdgeObject
      AggregateProductType: AggregateProductTypeObject
      ProductConnection: ProductConnectionObject
      ProductEdge: ProductEdgeObject
      AggregateProduct: AggregateProductObject
      BrandConnection: BrandConnectionObject
      BrandEdge: BrandEdgeObject
      AggregateBrand: AggregateBrandObject
      AttributeConnection: AttributeConnectionObject
      AttributeEdge: AttributeEdgeObject
      AggregateAttribute: AggregateAttributeObject
      OptionValueConnection: OptionValueConnectionObject
      OptionValueEdge: OptionValueEdgeObject
      AggregateOptionValue: AggregateOptionValueObject
      OptionConnection: OptionConnectionObject
      OptionEdge: OptionEdgeObject
      AggregateOption: AggregateOptionObject
      VariantConnection: VariantConnectionObject
      VariantEdge: VariantEdgeObject
      AggregateVariant: AggregateVariantObject
      ImageConnection: ImageConnectionObject
      ImageEdge: ImageEdgeObject
      AggregateImage: AggregateImageObject
      Order: OrderObject
      OrderLineItem: OrderLineItemObject
      User: UserObject
      OrderOptionValues: OrderOptionValuesObject
      Payment: PaymentObject
      OrderConnection: OrderConnectionObject
      OrderEdge: OrderEdgeObject
      AggregateOrder: AggregateOrderObject
      OrderLineItemConnection: OrderLineItemConnectionObject
      OrderLineItemEdge: OrderLineItemEdgeObject
      AggregateOrderLineItem: AggregateOrderLineItemObject
      OrderOptionValuesConnection: OrderOptionValuesConnectionObject
      OrderOptionValuesEdge: OrderOptionValuesEdgeObject
      AggregateOrderOptionValues: AggregateOrderOptionValuesObject
      PaymentConnection: PaymentConnectionObject
      PaymentEdge: PaymentEdgeObject
      AggregatePayment: AggregatePaymentObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      CollectionSubscriptionPayload: CollectionSubscriptionPayloadObject
      CollectionPreviousValues: CollectionPreviousValuesObject
      CollectionRuleSetSubscriptionPayload: CollectionRuleSetSubscriptionPayloadObject
      CollectionRuleSetPreviousValues: CollectionRuleSetPreviousValuesObject
      CollectionRuleSubscriptionPayload: CollectionRuleSubscriptionPayloadObject
      CollectionRulePreviousValues: CollectionRulePreviousValuesObject
      ProductTypeSubscriptionPayload: ProductTypeSubscriptionPayloadObject
      ProductTypePreviousValues: ProductTypePreviousValuesObject
      ProductSubscriptionPayload: ProductSubscriptionPayloadObject
      ProductPreviousValues: ProductPreviousValuesObject
      BrandSubscriptionPayload: BrandSubscriptionPayloadObject
      BrandPreviousValues: BrandPreviousValuesObject
      AttributeSubscriptionPayload: AttributeSubscriptionPayloadObject
      AttributePreviousValues: AttributePreviousValuesObject
      OptionValueSubscriptionPayload: OptionValueSubscriptionPayloadObject
      OptionValuePreviousValues: OptionValuePreviousValuesObject
      OptionSubscriptionPayload: OptionSubscriptionPayloadObject
      OptionPreviousValues: OptionPreviousValuesObject
      VariantSubscriptionPayload: VariantSubscriptionPayloadObject
      VariantPreviousValues: VariantPreviousValuesObject
      ImageSubscriptionPayload: ImageSubscriptionPayloadObject
      ImagePreviousValues: ImagePreviousValuesObject
      OrderSubscriptionPayload: OrderSubscriptionPayloadObject
      OrderPreviousValues: OrderPreviousValuesObject
      OrderLineItemSubscriptionPayload: OrderLineItemSubscriptionPayloadObject
      OrderLineItemPreviousValues: OrderLineItemPreviousValuesObject
      OrderOptionValuesSubscriptionPayload: OrderOptionValuesSubscriptionPayloadObject
      OrderOptionValuesPreviousValues: OrderOptionValuesPreviousValuesObject
      PaymentSubscriptionPayload: PaymentSubscriptionPayloadObject
      PaymentPreviousValues: PaymentPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Collection: CollectionFieldDetails
      CollectionRuleSet: CollectionRuleSetFieldDetails
      CollectionRule: CollectionRuleFieldDetails
      Product: ProductFieldDetails
      Brand: BrandFieldDetails
      ProductType: ProductTypeFieldDetails
      Image: ImageFieldDetails
      Variant: VariantFieldDetails
      OptionValue: OptionValueFieldDetails
      Option: OptionFieldDetails
      Attribute: AttributeFieldDetails
      CollectionConnection: CollectionConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      CollectionEdge: CollectionEdgeFieldDetails
      AggregateCollection: AggregateCollectionFieldDetails
      CollectionRuleSetConnection: CollectionRuleSetConnectionFieldDetails
      CollectionRuleSetEdge: CollectionRuleSetEdgeFieldDetails
      AggregateCollectionRuleSet: AggregateCollectionRuleSetFieldDetails
      CollectionRuleConnection: CollectionRuleConnectionFieldDetails
      CollectionRuleEdge: CollectionRuleEdgeFieldDetails
      AggregateCollectionRule: AggregateCollectionRuleFieldDetails
      ProductTypeConnection: ProductTypeConnectionFieldDetails
      ProductTypeEdge: ProductTypeEdgeFieldDetails
      AggregateProductType: AggregateProductTypeFieldDetails
      ProductConnection: ProductConnectionFieldDetails
      ProductEdge: ProductEdgeFieldDetails
      AggregateProduct: AggregateProductFieldDetails
      BrandConnection: BrandConnectionFieldDetails
      BrandEdge: BrandEdgeFieldDetails
      AggregateBrand: AggregateBrandFieldDetails
      AttributeConnection: AttributeConnectionFieldDetails
      AttributeEdge: AttributeEdgeFieldDetails
      AggregateAttribute: AggregateAttributeFieldDetails
      OptionValueConnection: OptionValueConnectionFieldDetails
      OptionValueEdge: OptionValueEdgeFieldDetails
      AggregateOptionValue: AggregateOptionValueFieldDetails
      OptionConnection: OptionConnectionFieldDetails
      OptionEdge: OptionEdgeFieldDetails
      AggregateOption: AggregateOptionFieldDetails
      VariantConnection: VariantConnectionFieldDetails
      VariantEdge: VariantEdgeFieldDetails
      AggregateVariant: AggregateVariantFieldDetails
      ImageConnection: ImageConnectionFieldDetails
      ImageEdge: ImageEdgeFieldDetails
      AggregateImage: AggregateImageFieldDetails
      Order: OrderFieldDetails
      OrderLineItem: OrderLineItemFieldDetails
      User: UserFieldDetails
      OrderOptionValues: OrderOptionValuesFieldDetails
      Payment: PaymentFieldDetails
      OrderConnection: OrderConnectionFieldDetails
      OrderEdge: OrderEdgeFieldDetails
      AggregateOrder: AggregateOrderFieldDetails
      OrderLineItemConnection: OrderLineItemConnectionFieldDetails
      OrderLineItemEdge: OrderLineItemEdgeFieldDetails
      AggregateOrderLineItem: AggregateOrderLineItemFieldDetails
      OrderOptionValuesConnection: OrderOptionValuesConnectionFieldDetails
      OrderOptionValuesEdge: OrderOptionValuesEdgeFieldDetails
      AggregateOrderOptionValues: AggregateOrderOptionValuesFieldDetails
      PaymentConnection: PaymentConnectionFieldDetails
      PaymentEdge: PaymentEdgeFieldDetails
      AggregatePayment: AggregatePaymentFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      CollectionSubscriptionPayload: CollectionSubscriptionPayloadFieldDetails
      CollectionPreviousValues: CollectionPreviousValuesFieldDetails
      CollectionRuleSetSubscriptionPayload: CollectionRuleSetSubscriptionPayloadFieldDetails
      CollectionRuleSetPreviousValues: CollectionRuleSetPreviousValuesFieldDetails
      CollectionRuleSubscriptionPayload: CollectionRuleSubscriptionPayloadFieldDetails
      CollectionRulePreviousValues: CollectionRulePreviousValuesFieldDetails
      ProductTypeSubscriptionPayload: ProductTypeSubscriptionPayloadFieldDetails
      ProductTypePreviousValues: ProductTypePreviousValuesFieldDetails
      ProductSubscriptionPayload: ProductSubscriptionPayloadFieldDetails
      ProductPreviousValues: ProductPreviousValuesFieldDetails
      BrandSubscriptionPayload: BrandSubscriptionPayloadFieldDetails
      BrandPreviousValues: BrandPreviousValuesFieldDetails
      AttributeSubscriptionPayload: AttributeSubscriptionPayloadFieldDetails
      AttributePreviousValues: AttributePreviousValuesFieldDetails
      OptionValueSubscriptionPayload: OptionValueSubscriptionPayloadFieldDetails
      OptionValuePreviousValues: OptionValuePreviousValuesFieldDetails
      OptionSubscriptionPayload: OptionSubscriptionPayloadFieldDetails
      OptionPreviousValues: OptionPreviousValuesFieldDetails
      VariantSubscriptionPayload: VariantSubscriptionPayloadFieldDetails
      VariantPreviousValues: VariantPreviousValuesFieldDetails
      ImageSubscriptionPayload: ImageSubscriptionPayloadFieldDetails
      ImagePreviousValues: ImagePreviousValuesFieldDetails
      OrderSubscriptionPayload: OrderSubscriptionPayloadFieldDetails
      OrderPreviousValues: OrderPreviousValuesFieldDetails
      OrderLineItemSubscriptionPayload: OrderLineItemSubscriptionPayloadFieldDetails
      OrderLineItemPreviousValues: OrderLineItemPreviousValuesFieldDetails
      OrderOptionValuesSubscriptionPayload: OrderOptionValuesSubscriptionPayloadFieldDetails
      OrderOptionValuesPreviousValues: OrderOptionValuesPreviousValuesFieldDetails
      PaymentSubscriptionPayload: PaymentSubscriptionPayloadFieldDetails
      PaymentPreviousValues: PaymentPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      CollectionWhereUniqueInput: CollectionWhereUniqueInputInputObject
      CollectionRuleWhereInput: CollectionRuleWhereInputInputObject
      ProductWhereInput: ProductWhereInputInputObject
      BrandWhereInput: BrandWhereInputInputObject
      ProductTypeWhereInput: ProductTypeWhereInputInputObject
      ImageWhereInput: ImageWhereInputInputObject
      VariantWhereInput: VariantWhereInputInputObject
      OptionValueWhereInput: OptionValueWhereInputInputObject
      OptionWhereInput: OptionWhereInputInputObject
      CollectionWhereInput: CollectionWhereInputInputObject
      CollectionRuleSetWhereInput: CollectionRuleSetWhereInputInputObject
      AttributeWhereInput: AttributeWhereInputInputObject
      CollectionRuleSetWhereUniqueInput: CollectionRuleSetWhereUniqueInputInputObject
      CollectionRuleWhereUniqueInput: CollectionRuleWhereUniqueInputInputObject
      ProductTypeWhereUniqueInput: ProductTypeWhereUniqueInputInputObject
      ProductWhereUniqueInput: ProductWhereUniqueInputInputObject
      BrandWhereUniqueInput: BrandWhereUniqueInputInputObject
      AttributeWhereUniqueInput: AttributeWhereUniqueInputInputObject
      OptionValueWhereUniqueInput: OptionValueWhereUniqueInputInputObject
      OptionWhereUniqueInput: OptionWhereUniqueInputInputObject
      VariantWhereUniqueInput: VariantWhereUniqueInputInputObject
      ImageWhereUniqueInput: ImageWhereUniqueInputInputObject
      OrderWhereUniqueInput: OrderWhereUniqueInputInputObject
      OrderLineItemWhereInput: OrderLineItemWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      OrderWhereInput: OrderWhereInputInputObject
      PaymentWhereInput: PaymentWhereInputInputObject
      OrderOptionValuesWhereInput: OrderOptionValuesWhereInputInputObject
      OrderLineItemWhereUniqueInput: OrderLineItemWhereUniqueInputInputObject
      OrderOptionValuesWhereUniqueInput: OrderOptionValuesWhereUniqueInputInputObject
      PaymentWhereUniqueInput: PaymentWhereUniqueInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      CollectionCreateInput: CollectionCreateInputInputObject
      CollectionRuleSetCreateOneInput: CollectionRuleSetCreateOneInputInputObject
      CollectionRuleSetCreateInput: CollectionRuleSetCreateInputInputObject
      CollectionRuleCreateManyInput: CollectionRuleCreateManyInputInputObject
      CollectionRuleCreateInput: CollectionRuleCreateInputInputObject
      ProductCreateManyWithoutCollectionsInput: ProductCreateManyWithoutCollectionsInputInputObject
      ProductCreateWithoutCollectionsInput: ProductCreateWithoutCollectionsInputInputObject
      BrandCreateOneWithoutProductsInput: BrandCreateOneWithoutProductsInputInputObject
      BrandCreateWithoutProductsInput: BrandCreateWithoutProductsInputInputObject
      ProductTypeCreateOneInput: ProductTypeCreateOneInputInputObject
      ProductTypeCreateInput: ProductTypeCreateInputInputObject
      ImageCreateOneInput: ImageCreateOneInputInputObject
      ImageCreateInput: ImageCreateInputInputObject
      VariantCreateManyInput: VariantCreateManyInputInputObject
      VariantCreateInput: VariantCreateInputInputObject
      OptionValueCreateManyInput: OptionValueCreateManyInputInputObject
      OptionValueCreateInput: OptionValueCreateInputInputObject
      OptionCreateOneWithoutValuesInput: OptionCreateOneWithoutValuesInputInputObject
      OptionCreateWithoutValuesInput: OptionCreateWithoutValuesInputInputObject
      ImageCreateManyInput: ImageCreateManyInputInputObject
      AttributeCreateManyWithoutProductsInput: AttributeCreateManyWithoutProductsInputInputObject
      AttributeCreateWithoutProductsInput: AttributeCreateWithoutProductsInputInputObject
      CollectionUpdateInput: CollectionUpdateInputInputObject
      CollectionRuleSetUpdateOneInput: CollectionRuleSetUpdateOneInputInputObject
      CollectionRuleSetUpdateDataInput: CollectionRuleSetUpdateDataInputInputObject
      CollectionRuleUpdateManyInput: CollectionRuleUpdateManyInputInputObject
      CollectionRuleUpdateWithWhereUniqueNestedInput: CollectionRuleUpdateWithWhereUniqueNestedInputInputObject
      CollectionRuleUpdateDataInput: CollectionRuleUpdateDataInputInputObject
      CollectionRuleUpsertWithWhereUniqueNestedInput: CollectionRuleUpsertWithWhereUniqueNestedInputInputObject
      CollectionRuleScalarWhereInput: CollectionRuleScalarWhereInputInputObject
      CollectionRuleUpdateManyWithWhereNestedInput: CollectionRuleUpdateManyWithWhereNestedInputInputObject
      CollectionRuleUpdateManyDataInput: CollectionRuleUpdateManyDataInputInputObject
      CollectionRuleSetUpsertNestedInput: CollectionRuleSetUpsertNestedInputInputObject
      ProductUpdateManyWithoutCollectionsInput: ProductUpdateManyWithoutCollectionsInputInputObject
      ProductUpdateWithWhereUniqueWithoutCollectionsInput: ProductUpdateWithWhereUniqueWithoutCollectionsInputInputObject
      ProductUpdateWithoutCollectionsDataInput: ProductUpdateWithoutCollectionsDataInputInputObject
      BrandUpdateOneRequiredWithoutProductsInput: BrandUpdateOneRequiredWithoutProductsInputInputObject
      BrandUpdateWithoutProductsDataInput: BrandUpdateWithoutProductsDataInputInputObject
      BrandUpsertWithoutProductsInput: BrandUpsertWithoutProductsInputInputObject
      ProductTypeUpdateOneInput: ProductTypeUpdateOneInputInputObject
      ProductTypeUpdateDataInput: ProductTypeUpdateDataInputInputObject
      ProductTypeUpsertNestedInput: ProductTypeUpsertNestedInputInputObject
      ImageUpdateOneRequiredInput: ImageUpdateOneRequiredInputInputObject
      ImageUpdateDataInput: ImageUpdateDataInputInputObject
      ImageUpsertNestedInput: ImageUpsertNestedInputInputObject
      VariantUpdateManyInput: VariantUpdateManyInputInputObject
      VariantUpdateWithWhereUniqueNestedInput: VariantUpdateWithWhereUniqueNestedInputInputObject
      VariantUpdateDataInput: VariantUpdateDataInputInputObject
      OptionValueUpdateManyInput: OptionValueUpdateManyInputInputObject
      OptionValueUpdateWithWhereUniqueNestedInput: OptionValueUpdateWithWhereUniqueNestedInputInputObject
      OptionValueUpdateDataInput: OptionValueUpdateDataInputInputObject
      OptionUpdateOneRequiredWithoutValuesInput: OptionUpdateOneRequiredWithoutValuesInputInputObject
      OptionUpdateWithoutValuesDataInput: OptionUpdateWithoutValuesDataInputInputObject
      OptionUpsertWithoutValuesInput: OptionUpsertWithoutValuesInputInputObject
      OptionValueUpsertWithWhereUniqueNestedInput: OptionValueUpsertWithWhereUniqueNestedInputInputObject
      OptionValueScalarWhereInput: OptionValueScalarWhereInputInputObject
      OptionValueUpdateManyWithWhereNestedInput: OptionValueUpdateManyWithWhereNestedInputInputObject
      OptionValueUpdateManyDataInput: OptionValueUpdateManyDataInputInputObject
      ImageUpdateManyInput: ImageUpdateManyInputInputObject
      ImageUpdateWithWhereUniqueNestedInput: ImageUpdateWithWhereUniqueNestedInputInputObject
      ImageUpsertWithWhereUniqueNestedInput: ImageUpsertWithWhereUniqueNestedInputInputObject
      ImageScalarWhereInput: ImageScalarWhereInputInputObject
      ImageUpdateManyWithWhereNestedInput: ImageUpdateManyWithWhereNestedInputInputObject
      ImageUpdateManyDataInput: ImageUpdateManyDataInputInputObject
      VariantUpsertWithWhereUniqueNestedInput: VariantUpsertWithWhereUniqueNestedInputInputObject
      VariantScalarWhereInput: VariantScalarWhereInputInputObject
      VariantUpdateManyWithWhereNestedInput: VariantUpdateManyWithWhereNestedInputInputObject
      VariantUpdateManyDataInput: VariantUpdateManyDataInputInputObject
      AttributeUpdateManyWithoutProductsInput: AttributeUpdateManyWithoutProductsInputInputObject
      AttributeUpdateWithWhereUniqueWithoutProductsInput: AttributeUpdateWithWhereUniqueWithoutProductsInputInputObject
      AttributeUpdateWithoutProductsDataInput: AttributeUpdateWithoutProductsDataInputInputObject
      AttributeUpsertWithWhereUniqueWithoutProductsInput: AttributeUpsertWithWhereUniqueWithoutProductsInputInputObject
      AttributeScalarWhereInput: AttributeScalarWhereInputInputObject
      AttributeUpdateManyWithWhereNestedInput: AttributeUpdateManyWithWhereNestedInputInputObject
      AttributeUpdateManyDataInput: AttributeUpdateManyDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutCollectionsInput: ProductUpsertWithWhereUniqueWithoutCollectionsInputInputObject
      ProductScalarWhereInput: ProductScalarWhereInputInputObject
      ProductUpdateManyWithWhereNestedInput: ProductUpdateManyWithWhereNestedInputInputObject
      ProductUpdateManyDataInput: ProductUpdateManyDataInputInputObject
      CollectionUpdateManyMutationInput: CollectionUpdateManyMutationInputInputObject
      CollectionRuleSetUpdateInput: CollectionRuleSetUpdateInputInputObject
      CollectionRuleSetUpdateManyMutationInput: CollectionRuleSetUpdateManyMutationInputInputObject
      CollectionRuleUpdateInput: CollectionRuleUpdateInputInputObject
      CollectionRuleUpdateManyMutationInput: CollectionRuleUpdateManyMutationInputInputObject
      ProductTypeUpdateInput: ProductTypeUpdateInputInputObject
      ProductTypeUpdateManyMutationInput: ProductTypeUpdateManyMutationInputInputObject
      ProductCreateInput: ProductCreateInputInputObject
      CollectionCreateManyWithoutProductsInput: CollectionCreateManyWithoutProductsInputInputObject
      CollectionCreateWithoutProductsInput: CollectionCreateWithoutProductsInputInputObject
      ProductUpdateInput: ProductUpdateInputInputObject
      CollectionUpdateManyWithoutProductsInput: CollectionUpdateManyWithoutProductsInputInputObject
      CollectionUpdateWithWhereUniqueWithoutProductsInput: CollectionUpdateWithWhereUniqueWithoutProductsInputInputObject
      CollectionUpdateWithoutProductsDataInput: CollectionUpdateWithoutProductsDataInputInputObject
      CollectionUpsertWithWhereUniqueWithoutProductsInput: CollectionUpsertWithWhereUniqueWithoutProductsInputInputObject
      CollectionScalarWhereInput: CollectionScalarWhereInputInputObject
      CollectionUpdateManyWithWhereNestedInput: CollectionUpdateManyWithWhereNestedInputInputObject
      CollectionUpdateManyDataInput: CollectionUpdateManyDataInputInputObject
      ProductUpdateManyMutationInput: ProductUpdateManyMutationInputInputObject
      BrandCreateInput: BrandCreateInputInputObject
      ProductCreateManyWithoutBrandInput: ProductCreateManyWithoutBrandInputInputObject
      ProductCreateWithoutBrandInput: ProductCreateWithoutBrandInputInputObject
      BrandUpdateInput: BrandUpdateInputInputObject
      ProductUpdateManyWithoutBrandInput: ProductUpdateManyWithoutBrandInputInputObject
      ProductUpdateWithWhereUniqueWithoutBrandInput: ProductUpdateWithWhereUniqueWithoutBrandInputInputObject
      ProductUpdateWithoutBrandDataInput: ProductUpdateWithoutBrandDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutBrandInput: ProductUpsertWithWhereUniqueWithoutBrandInputInputObject
      BrandUpdateManyMutationInput: BrandUpdateManyMutationInputInputObject
      AttributeCreateInput: AttributeCreateInputInputObject
      ProductCreateManyWithoutAttributesInput: ProductCreateManyWithoutAttributesInputInputObject
      ProductCreateWithoutAttributesInput: ProductCreateWithoutAttributesInputInputObject
      AttributeUpdateInput: AttributeUpdateInputInputObject
      ProductUpdateManyWithoutAttributesInput: ProductUpdateManyWithoutAttributesInputInputObject
      ProductUpdateWithWhereUniqueWithoutAttributesInput: ProductUpdateWithWhereUniqueWithoutAttributesInputInputObject
      ProductUpdateWithoutAttributesDataInput: ProductUpdateWithoutAttributesDataInputInputObject
      ProductUpsertWithWhereUniqueWithoutAttributesInput: ProductUpsertWithWhereUniqueWithoutAttributesInputInputObject
      AttributeUpdateManyMutationInput: AttributeUpdateManyMutationInputInputObject
      OptionValueUpdateInput: OptionValueUpdateInputInputObject
      OptionValueUpdateManyMutationInput: OptionValueUpdateManyMutationInputInputObject
      OptionCreateInput: OptionCreateInputInputObject
      OptionValueCreateManyWithoutOptionInput: OptionValueCreateManyWithoutOptionInputInputObject
      OptionValueCreateWithoutOptionInput: OptionValueCreateWithoutOptionInputInputObject
      OptionUpdateInput: OptionUpdateInputInputObject
      OptionValueUpdateManyWithoutOptionInput: OptionValueUpdateManyWithoutOptionInputInputObject
      OptionValueUpdateWithWhereUniqueWithoutOptionInput: OptionValueUpdateWithWhereUniqueWithoutOptionInputInputObject
      OptionValueUpdateWithoutOptionDataInput: OptionValueUpdateWithoutOptionDataInputInputObject
      OptionValueUpsertWithWhereUniqueWithoutOptionInput: OptionValueUpsertWithWhereUniqueWithoutOptionInputInputObject
      OptionUpdateManyMutationInput: OptionUpdateManyMutationInputInputObject
      VariantUpdateInput: VariantUpdateInputInputObject
      VariantUpdateManyMutationInput: VariantUpdateManyMutationInputInputObject
      ImageUpdateInput: ImageUpdateInputInputObject
      ImageUpdateManyMutationInput: ImageUpdateManyMutationInputInputObject
      OrderCreateInput: OrderCreateInputInputObject
      OrderLineItemCreateManyInput: OrderLineItemCreateManyInputInputObject
      OrderLineItemCreateInput: OrderLineItemCreateInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      UserCreateInput: UserCreateInputInputObject
      OrderCreateManyWithoutCustomerInput: OrderCreateManyWithoutCustomerInputInputObject
      OrderCreateWithoutCustomerInput: OrderCreateWithoutCustomerInputInputObject
      PaymentCreateOneWithoutOrderInput: PaymentCreateOneWithoutOrderInputInputObject
      PaymentCreateWithoutOrderInput: PaymentCreateWithoutOrderInputInputObject
      OrderOptionValuesCreateManyInput: OrderOptionValuesCreateManyInputInputObject
      OrderOptionValuesCreateInput: OrderOptionValuesCreateInputInputObject
      UserCreateOneWithoutOrdersInput: UserCreateOneWithoutOrdersInputInputObject
      UserCreateWithoutOrdersInput: UserCreateWithoutOrdersInputInputObject
      OrderUpdateInput: OrderUpdateInputInputObject
      OrderLineItemUpdateManyInput: OrderLineItemUpdateManyInputInputObject
      OrderLineItemUpdateWithWhereUniqueNestedInput: OrderLineItemUpdateWithWhereUniqueNestedInputInputObject
      OrderLineItemUpdateDataInput: OrderLineItemUpdateDataInputInputObject
      UserUpdateOneInput: UserUpdateOneInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      OrderUpdateManyWithoutCustomerInput: OrderUpdateManyWithoutCustomerInputInputObject
      OrderUpdateWithWhereUniqueWithoutCustomerInput: OrderUpdateWithWhereUniqueWithoutCustomerInputInputObject
      OrderUpdateWithoutCustomerDataInput: OrderUpdateWithoutCustomerDataInputInputObject
      PaymentUpdateOneRequiredWithoutOrderInput: PaymentUpdateOneRequiredWithoutOrderInputInputObject
      PaymentUpdateWithoutOrderDataInput: PaymentUpdateWithoutOrderDataInputInputObject
      PaymentUpsertWithoutOrderInput: PaymentUpsertWithoutOrderInputInputObject
      OrderUpsertWithWhereUniqueWithoutCustomerInput: OrderUpsertWithWhereUniqueWithoutCustomerInputInputObject
      OrderScalarWhereInput: OrderScalarWhereInputInputObject
      OrderUpdateManyWithWhereNestedInput: OrderUpdateManyWithWhereNestedInputInputObject
      OrderUpdateManyDataInput: OrderUpdateManyDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      OrderOptionValuesUpdateManyInput: OrderOptionValuesUpdateManyInputInputObject
      OrderOptionValuesUpdateWithWhereUniqueNestedInput: OrderOptionValuesUpdateWithWhereUniqueNestedInputInputObject
      OrderOptionValuesUpdateDataInput: OrderOptionValuesUpdateDataInputInputObject
      OrderOptionValuesUpsertWithWhereUniqueNestedInput: OrderOptionValuesUpsertWithWhereUniqueNestedInputInputObject
      OrderOptionValuesScalarWhereInput: OrderOptionValuesScalarWhereInputInputObject
      OrderOptionValuesUpdateManyWithWhereNestedInput: OrderOptionValuesUpdateManyWithWhereNestedInputInputObject
      OrderOptionValuesUpdateManyDataInput: OrderOptionValuesUpdateManyDataInputInputObject
      OrderLineItemUpsertWithWhereUniqueNestedInput: OrderLineItemUpsertWithWhereUniqueNestedInputInputObject
      OrderLineItemScalarWhereInput: OrderLineItemScalarWhereInputInputObject
      OrderLineItemUpdateManyWithWhereNestedInput: OrderLineItemUpdateManyWithWhereNestedInputInputObject
      OrderLineItemUpdateManyDataInput: OrderLineItemUpdateManyDataInputInputObject
      UserUpdateOneRequiredWithoutOrdersInput: UserUpdateOneRequiredWithoutOrdersInputInputObject
      UserUpdateWithoutOrdersDataInput: UserUpdateWithoutOrdersDataInputInputObject
      UserUpsertWithoutOrdersInput: UserUpsertWithoutOrdersInputInputObject
      OrderUpdateManyMutationInput: OrderUpdateManyMutationInputInputObject
      OrderLineItemUpdateInput: OrderLineItemUpdateInputInputObject
      OrderLineItemUpdateManyMutationInput: OrderLineItemUpdateManyMutationInputInputObject
      OrderOptionValuesUpdateInput: OrderOptionValuesUpdateInputInputObject
      OrderOptionValuesUpdateManyMutationInput: OrderOptionValuesUpdateManyMutationInputInputObject
      PaymentCreateInput: PaymentCreateInputInputObject
      OrderCreateOneWithoutPaymentInput: OrderCreateOneWithoutPaymentInputInputObject
      OrderCreateWithoutPaymentInput: OrderCreateWithoutPaymentInputInputObject
      PaymentUpdateInput: PaymentUpdateInputInputObject
      OrderUpdateOneRequiredWithoutPaymentInput: OrderUpdateOneRequiredWithoutPaymentInputInputObject
      OrderUpdateWithoutPaymentDataInput: OrderUpdateWithoutPaymentDataInputInputObject
      OrderUpsertWithoutPaymentInput: OrderUpsertWithoutPaymentInputInputObject
      PaymentUpdateManyMutationInput: PaymentUpdateManyMutationInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      CollectionSubscriptionWhereInput: CollectionSubscriptionWhereInputInputObject
      CollectionRuleSetSubscriptionWhereInput: CollectionRuleSetSubscriptionWhereInputInputObject
      CollectionRuleSubscriptionWhereInput: CollectionRuleSubscriptionWhereInputInputObject
      ProductTypeSubscriptionWhereInput: ProductTypeSubscriptionWhereInputInputObject
      ProductSubscriptionWhereInput: ProductSubscriptionWhereInputInputObject
      BrandSubscriptionWhereInput: BrandSubscriptionWhereInputInputObject
      AttributeSubscriptionWhereInput: AttributeSubscriptionWhereInputInputObject
      OptionValueSubscriptionWhereInput: OptionValueSubscriptionWhereInputInputObject
      OptionSubscriptionWhereInput: OptionSubscriptionWhereInputInputObject
      VariantSubscriptionWhereInput: VariantSubscriptionWhereInputInputObject
      ImageSubscriptionWhereInput: ImageSubscriptionWhereInputInputObject
      OrderSubscriptionWhereInput: OrderSubscriptionWhereInputInputObject
      OrderLineItemSubscriptionWhereInput: OrderLineItemSubscriptionWhereInputInputObject
      OrderOptionValuesSubscriptionWhereInput: OrderOptionValuesSubscriptionWhereInputInputObject
      PaymentSubscriptionWhereInput: PaymentSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    CollectionRuleField: CollectionRuleFieldValues,
    CollectionRuleRelation: CollectionRuleRelationValues,
    CollectionRuleOrderByInput: CollectionRuleOrderByInputValues,
    ProductOrderByInput: ProductOrderByInputValues,
    VariantOrderByInput: VariantOrderByInputValues,
    OptionValueOrderByInput: OptionValueOrderByInputValues,
    ImageOrderByInput: ImageOrderByInputValues,
    CollectionOrderByInput: CollectionOrderByInputValues,
    AttributeOrderByInput: AttributeOrderByInputValues,
    CollectionRuleSetOrderByInput: CollectionRuleSetOrderByInputValues,
    ProductTypeOrderByInput: ProductTypeOrderByInputValues,
    BrandOrderByInput: BrandOrderByInputValues,
    OptionOrderByInput: OptionOrderByInputValues,
    PaymentMethod: PaymentMethodValues,
    PaymentState: PaymentStateValues,
    CurrencyCode: CurrencyCodeValues,
    OrderState: OrderStateValues,
    OrderLineItemOrderByInput: OrderLineItemOrderByInputValues,
    OrderOrderByInput: OrderOrderByInputValues,
    OrderOptionValuesOrderByInput: OrderOptionValuesOrderByInputValues,
    PaymentOrderByInput: PaymentOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'collection', args?: QueryCollectionArgs[] | false, alias?: string  } 
  | { name: 'collections', args?: QueryCollectionsArgs[] | false, alias?: string  } 
  | { name: 'collectionsConnection', args?: QueryCollectionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'collectionRuleSet', args?: QueryCollectionRuleSetArgs[] | false, alias?: string  } 
  | { name: 'collectionRuleSets', args?: QueryCollectionRuleSetsArgs[] | false, alias?: string  } 
  | { name: 'collectionRuleSetsConnection', args?: QueryCollectionRuleSetsConnectionArgs[] | false, alias?: string  } 
  | { name: 'collectionRule', args?: QueryCollectionRuleArgs[] | false, alias?: string  } 
  | { name: 'collectionRules', args?: QueryCollectionRulesArgs[] | false, alias?: string  } 
  | { name: 'collectionRulesConnection', args?: QueryCollectionRulesConnectionArgs[] | false, alias?: string  } 
  | { name: 'productType', args?: QueryProductTypeArgs[] | false, alias?: string  } 
  | { name: 'productTypes', args?: QueryProductTypesArgs[] | false, alias?: string  } 
  | { name: 'productTypesConnection', args?: QueryProductTypesConnectionArgs[] | false, alias?: string  } 
  | { name: 'product', args?: QueryProductArgs[] | false, alias?: string  } 
  | { name: 'products', args?: QueryProductsArgs[] | false, alias?: string  } 
  | { name: 'productsConnection', args?: QueryProductsConnectionArgs[] | false, alias?: string  } 
  | { name: 'brand', args?: QueryBrandArgs[] | false, alias?: string  } 
  | { name: 'brands', args?: QueryBrandsArgs[] | false, alias?: string  } 
  | { name: 'brandsConnection', args?: QueryBrandsConnectionArgs[] | false, alias?: string  } 
  | { name: 'attribute', args?: QueryAttributeArgs[] | false, alias?: string  } 
  | { name: 'attributes', args?: QueryAttributesArgs[] | false, alias?: string  } 
  | { name: 'attributesConnection', args?: QueryAttributesConnectionArgs[] | false, alias?: string  } 
  | { name: 'optionValue', args?: QueryOptionValueArgs[] | false, alias?: string  } 
  | { name: 'optionValues', args?: QueryOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'optionValuesConnection', args?: QueryOptionValuesConnectionArgs[] | false, alias?: string  } 
  | { name: 'option', args?: QueryOptionArgs[] | false, alias?: string  } 
  | { name: 'options', args?: QueryOptionsArgs[] | false, alias?: string  } 
  | { name: 'optionsConnection', args?: QueryOptionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'variant', args?: QueryVariantArgs[] | false, alias?: string  } 
  | { name: 'variants', args?: QueryVariantsArgs[] | false, alias?: string  } 
  | { name: 'variantsConnection', args?: QueryVariantsConnectionArgs[] | false, alias?: string  } 
  | { name: 'image', args?: QueryImageArgs[] | false, alias?: string  } 
  | { name: 'images', args?: QueryImagesArgs[] | false, alias?: string  } 
  | { name: 'imagesConnection', args?: QueryImagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'order', args?: QueryOrderArgs[] | false, alias?: string  } 
  | { name: 'orders', args?: QueryOrdersArgs[] | false, alias?: string  } 
  | { name: 'ordersConnection', args?: QueryOrdersConnectionArgs[] | false, alias?: string  } 
  | { name: 'orderLineItem', args?: QueryOrderLineItemArgs[] | false, alias?: string  } 
  | { name: 'orderLineItems', args?: QueryOrderLineItemsArgs[] | false, alias?: string  } 
  | { name: 'orderLineItemsConnection', args?: QueryOrderLineItemsConnectionArgs[] | false, alias?: string  } 
  | { name: 'orderOptionValues', args?: QueryOrderOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'orderOptionValueses', args?: QueryOrderOptionValuesesArgs[] | false, alias?: string  } 
  | { name: 'orderOptionValuesesConnection', args?: QueryOrderOptionValuesesConnectionArgs[] | false, alias?: string  } 
  | { name: 'payment', args?: QueryPaymentArgs[] | false, alias?: string  } 
  | { name: 'payments', args?: QueryPaymentsArgs[] | false, alias?: string  } 
  | { name: 'paymentsConnection', args?: QueryPaymentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'collection'
  | 'collections'
  | 'collectionsConnection'
  | 'collectionRuleSet'
  | 'collectionRuleSets'
  | 'collectionRuleSetsConnection'
  | 'collectionRule'
  | 'collectionRules'
  | 'collectionRulesConnection'
  | 'productType'
  | 'productTypes'
  | 'productTypesConnection'
  | 'product'
  | 'products'
  | 'productsConnection'
  | 'brand'
  | 'brands'
  | 'brandsConnection'
  | 'attribute'
  | 'attributes'
  | 'attributesConnection'
  | 'optionValue'
  | 'optionValues'
  | 'optionValuesConnection'
  | 'option'
  | 'options'
  | 'optionsConnection'
  | 'variant'
  | 'variants'
  | 'variantsConnection'
  | 'image'
  | 'images'
  | 'imagesConnection'
  | 'order'
  | 'orders'
  | 'ordersConnection'
  | 'orderLineItem'
  | 'orderLineItems'
  | 'orderLineItemsConnection'
  | 'orderOptionValues'
  | 'orderOptionValueses'
  | 'orderOptionValuesesConnection'
  | 'payment'
  | 'payments'
  | 'paymentsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'


type QueryCollectionArgs =
  | 'where'
type QueryCollectionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCollectionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCollectionRuleSetArgs =
  | 'where'
type QueryCollectionRuleSetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCollectionRuleSetsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCollectionRuleArgs =
  | 'where'
type QueryCollectionRulesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCollectionRulesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductTypeArgs =
  | 'where'
type QueryProductTypesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductTypesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductArgs =
  | 'where'
type QueryProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProductsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBrandArgs =
  | 'where'
type QueryBrandsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBrandsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttributeArgs =
  | 'where'
type QueryAttributesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttributesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOptionValueArgs =
  | 'where'
type QueryOptionValuesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOptionValuesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOptionArgs =
  | 'where'
type QueryOptionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOptionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVariantArgs =
  | 'where'
type QueryVariantsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVariantsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryImageArgs =
  | 'where'
type QueryImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryImagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderArgs =
  | 'where'
type QueryOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrdersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderLineItemArgs =
  | 'where'
type QueryOrderLineItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderLineItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderOptionValuesArgs =
  | 'where'
type QueryOrderOptionValuesesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderOptionValuesesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPaymentArgs =
  | 'where'
type QueryPaymentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPaymentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  collection: {
    type: 'Collection'
    args: Record<QueryCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CollectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  collections: {
    type: 'Collection'
    args: Record<QueryCollectionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionWhereInput | null, orderBy?: prisma.CollectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection[]> | prisma.Collection[]
  }
  collectionsConnection: {
    type: 'CollectionConnection'
    args: Record<QueryCollectionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionWhereInput | null, orderBy?: prisma.CollectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionConnection> | prisma.CollectionConnection
  }
  collectionRuleSet: {
    type: 'CollectionRuleSet'
    args: Record<QueryCollectionRuleSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CollectionRuleSetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet | null> | prisma.CollectionRuleSet | null
  }
  collectionRuleSets: {
    type: 'CollectionRuleSet'
    args: Record<QueryCollectionRuleSetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionRuleSetWhereInput | null, orderBy?: prisma.CollectionRuleSetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet[]> | prisma.CollectionRuleSet[]
  }
  collectionRuleSetsConnection: {
    type: 'CollectionRuleSetConnection'
    args: Record<QueryCollectionRuleSetsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionRuleSetWhereInput | null, orderBy?: prisma.CollectionRuleSetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSetConnection> | prisma.CollectionRuleSetConnection
  }
  collectionRule: {
    type: 'CollectionRule'
    args: Record<QueryCollectionRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CollectionRuleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule | null> | prisma.CollectionRule | null
  }
  collectionRules: {
    type: 'CollectionRule'
    args: Record<QueryCollectionRulesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionRuleWhereInput | null, orderBy?: prisma.CollectionRuleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule[]> | prisma.CollectionRule[]
  }
  collectionRulesConnection: {
    type: 'CollectionRuleConnection'
    args: Record<QueryCollectionRulesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CollectionRuleWhereInput | null, orderBy?: prisma.CollectionRuleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleConnection> | prisma.CollectionRuleConnection
  }
  productType: {
    type: 'ProductType'
    args: Record<QueryProductTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType | null> | prisma.ProductType | null
  }
  productTypes: {
    type: 'ProductType'
    args: Record<QueryProductTypesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductTypeWhereInput | null, orderBy?: prisma.ProductTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType[]> | prisma.ProductType[]
  }
  productTypesConnection: {
    type: 'ProductTypeConnection'
    args: Record<QueryProductTypesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductTypeWhereInput | null, orderBy?: prisma.ProductTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductTypeConnection> | prisma.ProductTypeConnection
  }
  product: {
    type: 'Product'
    args: Record<QueryProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  products: {
    type: 'Product'
    args: Record<QueryProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
  productsConnection: {
    type: 'ProductConnection'
    args: Record<QueryProductsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductConnection> | prisma.ProductConnection
  }
  brand: {
    type: 'Brand'
    args: Record<QueryBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  brands: {
    type: 'Brand'
    args: Record<QueryBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BrandWhereInput | null, orderBy?: prisma.BrandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand[]> | prisma.Brand[]
  }
  brandsConnection: {
    type: 'BrandConnection'
    args: Record<QueryBrandsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BrandWhereInput | null, orderBy?: prisma.BrandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandConnection> | prisma.BrandConnection
  }
  attribute: {
    type: 'Attribute'
    args: Record<QueryAttributeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AttributeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute | null> | prisma.Attribute | null
  }
  attributes: {
    type: 'Attribute'
    args: Record<QueryAttributesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttributeWhereInput | null, orderBy?: prisma.AttributeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute[]> | prisma.Attribute[]
  }
  attributesConnection: {
    type: 'AttributeConnection'
    args: Record<QueryAttributesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttributeWhereInput | null, orderBy?: prisma.AttributeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttributeConnection> | prisma.AttributeConnection
  }
  optionValue: {
    type: 'OptionValue'
    args: Record<QueryOptionValueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OptionValueWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue | null> | prisma.OptionValue | null
  }
  optionValues: {
    type: 'OptionValue'
    args: Record<QueryOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OptionValueWhereInput | null, orderBy?: prisma.OptionValueOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue[]> | prisma.OptionValue[]
  }
  optionValuesConnection: {
    type: 'OptionValueConnection'
    args: Record<QueryOptionValuesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OptionValueWhereInput | null, orderBy?: prisma.OptionValueOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValueConnection> | prisma.OptionValueConnection
  }
  option: {
    type: 'Option'
    args: Record<QueryOptionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OptionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option | null> | prisma.Option | null
  }
  options: {
    type: 'Option'
    args: Record<QueryOptionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OptionWhereInput | null, orderBy?: prisma.OptionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option[]> | prisma.Option[]
  }
  optionsConnection: {
    type: 'OptionConnection'
    args: Record<QueryOptionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OptionWhereInput | null, orderBy?: prisma.OptionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionConnection> | prisma.OptionConnection
  }
  variant: {
    type: 'Variant'
    args: Record<QueryVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VariantWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  variants: {
    type: 'Variant'
    args: Record<QueryVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VariantWhereInput | null, orderBy?: prisma.VariantOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant[]> | prisma.Variant[]
  }
  variantsConnection: {
    type: 'VariantConnection'
    args: Record<QueryVariantsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VariantWhereInput | null, orderBy?: prisma.VariantOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantConnection> | prisma.VariantConnection
  }
  image: {
    type: 'Image'
    args: Record<QueryImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  images: {
    type: 'Image'
    args: Record<QueryImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ImageWhereInput | null, orderBy?: prisma.ImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image[]> | prisma.Image[]
  }
  imagesConnection: {
    type: 'ImageConnection'
    args: Record<QueryImagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ImageWhereInput | null, orderBy?: prisma.ImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImageConnection> | prisma.ImageConnection
  }
  order: {
    type: 'Order'
    args: Record<QueryOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  orders: {
    type: 'Order'
    args: Record<QueryOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order[]> | prisma.Order[]
  }
  ordersConnection: {
    type: 'OrderConnection'
    args: Record<QueryOrdersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderConnection> | prisma.OrderConnection
  }
  orderLineItem: {
    type: 'OrderLineItem'
    args: Record<QueryOrderLineItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OrderLineItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem | null> | prisma.OrderLineItem | null
  }
  orderLineItems: {
    type: 'OrderLineItem'
    args: Record<QueryOrderLineItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderLineItemWhereInput | null, orderBy?: prisma.OrderLineItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem[]> | prisma.OrderLineItem[]
  }
  orderLineItemsConnection: {
    type: 'OrderLineItemConnection'
    args: Record<QueryOrderLineItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderLineItemWhereInput | null, orderBy?: prisma.OrderLineItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItemConnection> | prisma.OrderLineItemConnection
  }
  orderOptionValues: {
    type: 'OrderOptionValues'
    args: Record<QueryOrderOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OrderOptionValuesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues | null> | prisma.OrderOptionValues | null
  }
  orderOptionValueses: {
    type: 'OrderOptionValues'
    args: Record<QueryOrderOptionValuesesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderOptionValuesWhereInput | null, orderBy?: prisma.OrderOptionValuesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues[]> | prisma.OrderOptionValues[]
  }
  orderOptionValuesesConnection: {
    type: 'OrderOptionValuesConnection'
    args: Record<QueryOrderOptionValuesesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderOptionValuesWhereInput | null, orderBy?: prisma.OrderOptionValuesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValuesConnection> | prisma.OrderOptionValuesConnection
  }
  payment: {
    type: 'Payment'
    args: Record<QueryPaymentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PaymentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment | null> | prisma.Payment | null
  }
  payments: {
    type: 'Payment'
    args: Record<QueryPaymentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PaymentWhereInput | null, orderBy?: prisma.PaymentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment[]> | prisma.Payment[]
  }
  paymentsConnection: {
    type: 'PaymentConnection'
    args: Record<QueryPaymentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PaymentWhereInput | null, orderBy?: prisma.PaymentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentConnection> | prisma.PaymentConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
}
  

// Types for Collection

type CollectionObject =
  | CollectionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'rules', args?: [] | false, alias?: string  } 
  | { name: 'products', args?: CollectionProductsArgs[] | false, alias?: string  } 

type CollectionFields =
  | 'id'
  | 'name'
  | 'rules'
  | 'products'


type CollectionProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CollectionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rules: {
    type: 'CollectionRuleSet'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Collection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet | null> | prisma.CollectionRuleSet | null
  }
  products: {
    type: 'Product'
    args: Record<CollectionProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Collection">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
}
  

// Types for CollectionRuleSet

type CollectionRuleSetObject =
  | CollectionRuleSetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'rules', args?: CollectionRuleSetRulesArgs[] | false, alias?: string  } 
  | { name: 'appliesDisjunctively', args?: [] | false, alias?: string  } 

type CollectionRuleSetFields =
  | 'id'
  | 'rules'
  | 'appliesDisjunctively'


type CollectionRuleSetRulesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CollectionRuleSetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rules: {
    type: 'CollectionRule'
    args: Record<CollectionRuleSetRulesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleSet">,
      args: { where?: CollectionRuleWhereInput | null, orderBy?: prisma.CollectionRuleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule[]> | prisma.CollectionRule[]
  }
  appliesDisjunctively: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CollectionRule

type CollectionRuleObject =
  | CollectionRuleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'field', args?: [] | false, alias?: string  } 
  | { name: 'relation', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type CollectionRuleFields =
  | 'id'
  | 'field'
  | 'relation'
  | 'value'



  

export interface CollectionRuleFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  field: {
    type: 'CollectionRuleField'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRule">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleField> | prisma.CollectionRuleField
  }
  relation: {
    type: 'CollectionRuleRelation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRule">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleRelation> | prisma.CollectionRuleRelation
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Product

type ProductObject =
  | ProductFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'brand', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'thumbnail', args?: [] | false, alias?: string  } 
  | { name: 'variants', args?: ProductVariantsArgs[] | false, alias?: string  } 
  | { name: 'collections', args?: ProductCollectionsArgs[] | false, alias?: string  } 
  | { name: 'attributes', args?: ProductAttributesArgs[] | false, alias?: string  } 

type ProductFields =
  | 'id'
  | 'slug'
  | 'name'
  | 'brand'
  | 'description'
  | 'type'
  | 'thumbnail'
  | 'variants'
  | 'collections'
  | 'attributes'


type ProductVariantsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductCollectionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type ProductAttributesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProductFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  brand: {
    type: 'Brand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand> | prisma.Brand
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'ProductType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType | null> | prisma.ProductType | null
  }
  thumbnail: {
    type: 'Image'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  variants: {
    type: 'Variant'
    args: Record<ProductVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: VariantWhereInput | null, orderBy?: prisma.VariantOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant[]> | prisma.Variant[]
  }
  collections: {
    type: 'Collection'
    args: Record<ProductCollectionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: CollectionWhereInput | null, orderBy?: prisma.CollectionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection[]> | prisma.Collection[]
  }
  attributes: {
    type: 'Attribute'
    args: Record<ProductAttributesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Product">,
      args: { where?: AttributeWhereInput | null, orderBy?: prisma.AttributeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute[]> | prisma.Attribute[]
  }
}
  

// Types for Brand

type BrandObject =
  | BrandFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'products', args?: BrandProductsArgs[] | false, alias?: string  } 

type BrandFields =
  | 'id'
  | 'name'
  | 'products'


type BrandProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface BrandFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  products: {
    type: 'Product'
    args: Record<BrandProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Brand">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
}
  

// Types for ProductType

type ProductTypeObject =
  | ProductTypeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type ProductTypeFields =
  | 'id'
  | 'name'



  

export interface ProductTypeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Image

type ImageObject =
  | ImageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type ImageFields =
  | 'id'
  | 'url'



  

export interface ImageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Variant

type VariantObject =
  | VariantFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'optionValues', args?: VariantOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'availableForSale', args?: [] | false, alias?: string  } 
  | { name: 'sku', args?: [] | false, alias?: string  } 
  | { name: 'images', args?: VariantImagesArgs[] | false, alias?: string  } 

type VariantFields =
  | 'id'
  | 'optionValues'
  | 'price'
  | 'availableForSale'
  | 'sku'
  | 'images'


type VariantOptionValuesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type VariantImagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface VariantFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  optionValues: {
    type: 'OptionValue'
    args: Record<VariantOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Variant">,
      args: { where?: OptionValueWhereInput | null, orderBy?: prisma.OptionValueOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue[]> | prisma.OptionValue[]
  }
  price: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  availableForSale: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sku: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  images: {
    type: 'Image'
    args: Record<VariantImagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Variant">,
      args: { where?: ImageWhereInput | null, orderBy?: prisma.ImageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image[]> | prisma.Image[]
  }
}
  

// Types for OptionValue

type OptionValueObject =
  | OptionValueFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'option', args?: [] | false, alias?: string  } 

type OptionValueFields =
  | 'id'
  | 'name'
  | 'option'



  

export interface OptionValueFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  option: {
    type: 'Option'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionValue">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option> | prisma.Option
  }
}
  

// Types for Option

type OptionObject =
  | OptionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'isColor', args?: [] | false, alias?: string  } 
  | { name: 'values', args?: OptionValuesArgs[] | false, alias?: string  } 

type OptionFields =
  | 'id'
  | 'name'
  | 'isColor'
  | 'values'


type OptionValuesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface OptionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isColor: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  values: {
    type: 'OptionValue'
    args: Record<OptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Option">,
      args: { where?: OptionValueWhereInput | null, orderBy?: prisma.OptionValueOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue[]> | prisma.OptionValue[]
  }
}
  

// Types for Attribute

type AttributeObject =
  | AttributeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'key', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 
  | { name: 'products', args?: AttributeProductsArgs[] | false, alias?: string  } 

type AttributeFields =
  | 'id'
  | 'key'
  | 'value'
  | 'products'


type AttributeProductsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface AttributeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  products: {
    type: 'Product'
    args: Record<AttributeProductsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Attribute">,
      args: { where?: ProductWhereInput | null, orderBy?: prisma.ProductOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product[]> | prisma.Product[]
  }
}
  

// Types for CollectionConnection

type CollectionConnectionObject =
  | CollectionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CollectionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CollectionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CollectionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionEdge[]> | prisma.CollectionEdge[]
  }
  aggregate: {
    type: 'AggregateCollection'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCollection> | prisma.AggregateCollection
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CollectionEdge

type CollectionEdgeObject =
  | CollectionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CollectionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CollectionEdgeFieldDetails {
  node: {
    type: 'Collection'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection> | prisma.Collection
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCollection

type AggregateCollectionObject =
  | AggregateCollectionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCollectionFields =
  | 'count'



  

export interface AggregateCollectionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CollectionRuleSetConnection

type CollectionRuleSetConnectionObject =
  | CollectionRuleSetConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CollectionRuleSetConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CollectionRuleSetConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleSetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CollectionRuleSetEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleSetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSetEdge[]> | prisma.CollectionRuleSetEdge[]
  }
  aggregate: {
    type: 'AggregateCollectionRuleSet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleSetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCollectionRuleSet> | prisma.AggregateCollectionRuleSet
  }
}
  

// Types for CollectionRuleSetEdge

type CollectionRuleSetEdgeObject =
  | CollectionRuleSetEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CollectionRuleSetEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CollectionRuleSetEdgeFieldDetails {
  node: {
    type: 'CollectionRuleSet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleSetEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet> | prisma.CollectionRuleSet
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCollectionRuleSet

type AggregateCollectionRuleSetObject =
  | AggregateCollectionRuleSetFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCollectionRuleSetFields =
  | 'count'



  

export interface AggregateCollectionRuleSetFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CollectionRuleConnection

type CollectionRuleConnectionObject =
  | CollectionRuleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CollectionRuleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CollectionRuleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CollectionRuleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleEdge[]> | prisma.CollectionRuleEdge[]
  }
  aggregate: {
    type: 'AggregateCollectionRule'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCollectionRule> | prisma.AggregateCollectionRule
  }
}
  

// Types for CollectionRuleEdge

type CollectionRuleEdgeObject =
  | CollectionRuleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CollectionRuleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CollectionRuleEdgeFieldDetails {
  node: {
    type: 'CollectionRule'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule> | prisma.CollectionRule
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCollectionRule

type AggregateCollectionRuleObject =
  | AggregateCollectionRuleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCollectionRuleFields =
  | 'count'



  

export interface AggregateCollectionRuleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductTypeConnection

type ProductTypeConnectionObject =
  | ProductTypeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductTypeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductTypeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductTypeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductTypeEdge[]> | prisma.ProductTypeEdge[]
  }
  aggregate: {
    type: 'AggregateProductType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProductType> | prisma.AggregateProductType
  }
}
  

// Types for ProductTypeEdge

type ProductTypeEdgeObject =
  | ProductTypeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductTypeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductTypeEdgeFieldDetails {
  node: {
    type: 'ProductType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductTypeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType> | prisma.ProductType
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProductType

type AggregateProductTypeObject =
  | AggregateProductTypeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductTypeFields =
  | 'count'



  

export interface AggregateProductTypeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductConnection

type ProductConnectionObject =
  | ProductConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProductConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProductConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProductEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductEdge[]> | prisma.ProductEdge[]
  }
  aggregate: {
    type: 'AggregateProduct'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProduct> | prisma.AggregateProduct
  }
}
  

// Types for ProductEdge

type ProductEdgeObject =
  | ProductEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProductEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProductEdgeFieldDetails {
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProduct

type AggregateProductObject =
  | AggregateProductFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProductFields =
  | 'count'



  

export interface AggregateProductFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BrandConnection

type BrandConnectionObject =
  | BrandConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BrandConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BrandConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BrandEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandEdge[]> | prisma.BrandEdge[]
  }
  aggregate: {
    type: 'AggregateBrand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBrand> | prisma.AggregateBrand
  }
}
  

// Types for BrandEdge

type BrandEdgeObject =
  | BrandEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BrandEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BrandEdgeFieldDetails {
  node: {
    type: 'Brand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand> | prisma.Brand
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBrand

type AggregateBrandObject =
  | AggregateBrandFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBrandFields =
  | 'count'



  

export interface AggregateBrandFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttributeConnection

type AttributeConnectionObject =
  | AttributeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AttributeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AttributeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttributeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AttributeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AttributeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttributeEdge[]> | prisma.AttributeEdge[]
  }
  aggregate: {
    type: 'AggregateAttribute'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttributeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAttribute> | prisma.AggregateAttribute
  }
}
  

// Types for AttributeEdge

type AttributeEdgeObject =
  | AttributeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AttributeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AttributeEdgeFieldDetails {
  node: {
    type: 'Attribute'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttributeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute> | prisma.Attribute
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAttribute

type AggregateAttributeObject =
  | AggregateAttributeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAttributeFields =
  | 'count'



  

export interface AggregateAttributeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OptionValueConnection

type OptionValueConnectionObject =
  | OptionValueConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OptionValueConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OptionValueConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionValueConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OptionValueEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OptionValueConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValueEdge[]> | prisma.OptionValueEdge[]
  }
  aggregate: {
    type: 'AggregateOptionValue'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionValueConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOptionValue> | prisma.AggregateOptionValue
  }
}
  

// Types for OptionValueEdge

type OptionValueEdgeObject =
  | OptionValueEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OptionValueEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OptionValueEdgeFieldDetails {
  node: {
    type: 'OptionValue'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionValueEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue> | prisma.OptionValue
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOptionValue

type AggregateOptionValueObject =
  | AggregateOptionValueFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOptionValueFields =
  | 'count'



  

export interface AggregateOptionValueFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OptionConnection

type OptionConnectionObject =
  | OptionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OptionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OptionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OptionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OptionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionEdge[]> | prisma.OptionEdge[]
  }
  aggregate: {
    type: 'AggregateOption'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOption> | prisma.AggregateOption
  }
}
  

// Types for OptionEdge

type OptionEdgeObject =
  | OptionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OptionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OptionEdgeFieldDetails {
  node: {
    type: 'Option'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option> | prisma.Option
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOption

type AggregateOptionObject =
  | AggregateOptionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOptionFields =
  | 'count'



  

export interface AggregateOptionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VariantConnection

type VariantConnectionObject =
  | VariantConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VariantConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VariantConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VariantEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VariantConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantEdge[]> | prisma.VariantEdge[]
  }
  aggregate: {
    type: 'AggregateVariant'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVariant> | prisma.AggregateVariant
  }
}
  

// Types for VariantEdge

type VariantEdgeObject =
  | VariantEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VariantEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VariantEdgeFieldDetails {
  node: {
    type: 'Variant'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant> | prisma.Variant
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVariant

type AggregateVariantObject =
  | AggregateVariantFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVariantFields =
  | 'count'



  

export interface AggregateVariantFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ImageConnection

type ImageConnectionObject =
  | ImageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ImageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ImageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ImageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImageEdge[]> | prisma.ImageEdge[]
  }
  aggregate: {
    type: 'AggregateImage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateImage> | prisma.AggregateImage
  }
}
  

// Types for ImageEdge

type ImageEdgeObject =
  | ImageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ImageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ImageEdgeFieldDetails {
  node: {
    type: 'Image'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateImage

type AggregateImageObject =
  | AggregateImageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateImageFields =
  | 'count'



  

export interface AggregateImageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Order

type OrderObject =
  | OrderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'items', args?: OrderItemsArgs[] | false, alias?: string  } 
  | { name: 'customer', args?: [] | false, alias?: string  } 
  | { name: 'subTotalBeforeTax', args?: [] | false, alias?: string  } 
  | { name: 'subTotal', args?: [] | false, alias?: string  } 
  | { name: 'payment', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 

type OrderFields =
  | 'id'
  | 'createdAt'
  | 'items'
  | 'customer'
  | 'subTotalBeforeTax'
  | 'subTotal'
  | 'payment'
  | 'state'


type OrderItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface OrderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  items: {
    type: 'OrderLineItem'
    args: Record<OrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: { where?: OrderLineItemWhereInput | null, orderBy?: prisma.OrderLineItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem[]> | prisma.OrderLineItem[]
  }
  customer: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  subTotalBeforeTax: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subTotal: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  payment: {
    type: 'Payment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment> | prisma.Payment
  }
  state: {
    type: 'OrderState'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderState> | prisma.OrderState
  }
}
  

// Types for OrderLineItem

type OrderLineItemObject =
  | OrderLineItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'unitPrice', args?: [] | false, alias?: string  } 
  | { name: 'sku', args?: [] | false, alias?: string  } 
  | { name: 'orderOptionValues', args?: OrderLineItemOrderOptionValuesArgs[] | false, alias?: string  } 

type OrderLineItemFields =
  | 'id'
  | 'owner'
  | 'image'
  | 'quantity'
  | 'unitPrice'
  | 'sku'
  | 'orderOptionValues'


type OrderLineItemOrderOptionValuesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface OrderLineItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderLineItem">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  image: {
    type: 'Image'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderLineItem">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  unitPrice: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sku: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  orderOptionValues: {
    type: 'OrderOptionValues'
    args: Record<OrderLineItemOrderOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderLineItem">,
      args: { where?: OrderOptionValuesWhereInput | null, orderBy?: prisma.OrderOptionValuesOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues[]> | prisma.OrderOptionValues[]
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'orders', args?: UserOrdersArgs[] | false, alias?: string  } 
  | { name: 'cart', args?: UserCartArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'orders'
  | 'cart'


type UserOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserCartArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  orders: {
    type: 'Order'
    args: Record<UserOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order[]> | prisma.Order[]
  }
  cart: {
    type: 'Variant'
    args: Record<UserCartArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: VariantWhereInput | null, orderBy?: prisma.VariantOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant[]> | prisma.Variant[]
  }
}
  

// Types for OrderOptionValues

type OrderOptionValuesObject =
  | OrderOptionValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'optionName', args?: [] | false, alias?: string  } 
  | { name: 'optionValue', args?: [] | false, alias?: string  } 

type OrderOptionValuesFields =
  | 'id'
  | 'optionName'
  | 'optionValue'



  

export interface OrderOptionValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  optionName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  optionValue: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Payment

type PaymentObject =
  | PaymentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'method', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'order', args?: [] | false, alias?: string  } 
  | { name: 'currencyCode', args?: [] | false, alias?: string  } 

type PaymentFields =
  | 'id'
  | 'method'
  | 'amount'
  | 'state'
  | 'order'
  | 'currencyCode'



  

export interface PaymentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  method: {
    type: 'PaymentMethod'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Payment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentMethod> | prisma.PaymentMethod
  }
  amount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  state: {
    type: 'PaymentState'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Payment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentState> | prisma.PaymentState
  }
  order: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Payment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  currencyCode: {
    type: 'CurrencyCode'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Payment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CurrencyCode> | prisma.CurrencyCode
  }
}
  

// Types for OrderConnection

type OrderConnectionObject =
  | OrderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OrderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OrderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderEdge[]> | prisma.OrderEdge[]
  }
  aggregate: {
    type: 'AggregateOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOrder> | prisma.AggregateOrder
  }
}
  

// Types for OrderEdge

type OrderEdgeObject =
  | OrderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OrderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OrderEdgeFieldDetails {
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOrder

type AggregateOrderObject =
  | AggregateOrderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOrderFields =
  | 'count'



  

export interface AggregateOrderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderLineItemConnection

type OrderLineItemConnectionObject =
  | OrderLineItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OrderLineItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OrderLineItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderLineItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrderLineItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderLineItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItemEdge[]> | prisma.OrderLineItemEdge[]
  }
  aggregate: {
    type: 'AggregateOrderLineItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderLineItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOrderLineItem> | prisma.AggregateOrderLineItem
  }
}
  

// Types for OrderLineItemEdge

type OrderLineItemEdgeObject =
  | OrderLineItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OrderLineItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OrderLineItemEdgeFieldDetails {
  node: {
    type: 'OrderLineItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderLineItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem> | prisma.OrderLineItem
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOrderLineItem

type AggregateOrderLineItemObject =
  | AggregateOrderLineItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOrderLineItemFields =
  | 'count'



  

export interface AggregateOrderLineItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderOptionValuesConnection

type OrderOptionValuesConnectionObject =
  | OrderOptionValuesConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OrderOptionValuesConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OrderOptionValuesConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderOptionValuesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrderOptionValuesEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderOptionValuesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValuesEdge[]> | prisma.OrderOptionValuesEdge[]
  }
  aggregate: {
    type: 'AggregateOrderOptionValues'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderOptionValuesConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOrderOptionValues> | prisma.AggregateOrderOptionValues
  }
}
  

// Types for OrderOptionValuesEdge

type OrderOptionValuesEdgeObject =
  | OrderOptionValuesEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OrderOptionValuesEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OrderOptionValuesEdgeFieldDetails {
  node: {
    type: 'OrderOptionValues'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderOptionValuesEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues> | prisma.OrderOptionValues
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOrderOptionValues

type AggregateOrderOptionValuesObject =
  | AggregateOrderOptionValuesFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOrderOptionValuesFields =
  | 'count'



  

export interface AggregateOrderOptionValuesFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PaymentConnection

type PaymentConnectionObject =
  | PaymentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PaymentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PaymentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PaymentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentEdge[]> | prisma.PaymentEdge[]
  }
  aggregate: {
    type: 'AggregatePayment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePayment> | prisma.AggregatePayment
  }
}
  

// Types for PaymentEdge

type PaymentEdgeObject =
  | PaymentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PaymentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PaymentEdgeFieldDetails {
  node: {
    type: 'Payment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment> | prisma.Payment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePayment

type AggregatePaymentObject =
  | AggregatePaymentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePaymentFields =
  | 'count'



  

export interface AggregatePaymentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createCollection', args?: MutationCreateCollectionArgs[] | false, alias?: string  } 
  | { name: 'updateCollection', args?: MutationUpdateCollectionArgs[] | false, alias?: string  } 
  | { name: 'updateManyCollections', args?: MutationUpdateManyCollectionsArgs[] | false, alias?: string  } 
  | { name: 'upsertCollection', args?: MutationUpsertCollectionArgs[] | false, alias?: string  } 
  | { name: 'deleteCollection', args?: MutationDeleteCollectionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCollections', args?: MutationDeleteManyCollectionsArgs[] | false, alias?: string  } 
  | { name: 'createCollectionRuleSet', args?: MutationCreateCollectionRuleSetArgs[] | false, alias?: string  } 
  | { name: 'updateCollectionRuleSet', args?: MutationUpdateCollectionRuleSetArgs[] | false, alias?: string  } 
  | { name: 'updateManyCollectionRuleSets', args?: MutationUpdateManyCollectionRuleSetsArgs[] | false, alias?: string  } 
  | { name: 'upsertCollectionRuleSet', args?: MutationUpsertCollectionRuleSetArgs[] | false, alias?: string  } 
  | { name: 'deleteCollectionRuleSet', args?: MutationDeleteCollectionRuleSetArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCollectionRuleSets', args?: MutationDeleteManyCollectionRuleSetsArgs[] | false, alias?: string  } 
  | { name: 'createCollectionRule', args?: MutationCreateCollectionRuleArgs[] | false, alias?: string  } 
  | { name: 'updateCollectionRule', args?: MutationUpdateCollectionRuleArgs[] | false, alias?: string  } 
  | { name: 'updateManyCollectionRules', args?: MutationUpdateManyCollectionRulesArgs[] | false, alias?: string  } 
  | { name: 'upsertCollectionRule', args?: MutationUpsertCollectionRuleArgs[] | false, alias?: string  } 
  | { name: 'deleteCollectionRule', args?: MutationDeleteCollectionRuleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCollectionRules', args?: MutationDeleteManyCollectionRulesArgs[] | false, alias?: string  } 
  | { name: 'createProductType', args?: MutationCreateProductTypeArgs[] | false, alias?: string  } 
  | { name: 'updateProductType', args?: MutationUpdateProductTypeArgs[] | false, alias?: string  } 
  | { name: 'updateManyProductTypes', args?: MutationUpdateManyProductTypesArgs[] | false, alias?: string  } 
  | { name: 'upsertProductType', args?: MutationUpsertProductTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteProductType', args?: MutationDeleteProductTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProductTypes', args?: MutationDeleteManyProductTypesArgs[] | false, alias?: string  } 
  | { name: 'createProduct', args?: MutationCreateProductArgs[] | false, alias?: string  } 
  | { name: 'updateProduct', args?: MutationUpdateProductArgs[] | false, alias?: string  } 
  | { name: 'updateManyProducts', args?: MutationUpdateManyProductsArgs[] | false, alias?: string  } 
  | { name: 'upsertProduct', args?: MutationUpsertProductArgs[] | false, alias?: string  } 
  | { name: 'deleteProduct', args?: MutationDeleteProductArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProducts', args?: MutationDeleteManyProductsArgs[] | false, alias?: string  } 
  | { name: 'createBrand', args?: MutationCreateBrandArgs[] | false, alias?: string  } 
  | { name: 'updateBrand', args?: MutationUpdateBrandArgs[] | false, alias?: string  } 
  | { name: 'updateManyBrands', args?: MutationUpdateManyBrandsArgs[] | false, alias?: string  } 
  | { name: 'upsertBrand', args?: MutationUpsertBrandArgs[] | false, alias?: string  } 
  | { name: 'deleteBrand', args?: MutationDeleteBrandArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBrands', args?: MutationDeleteManyBrandsArgs[] | false, alias?: string  } 
  | { name: 'createAttribute', args?: MutationCreateAttributeArgs[] | false, alias?: string  } 
  | { name: 'updateAttribute', args?: MutationUpdateAttributeArgs[] | false, alias?: string  } 
  | { name: 'updateManyAttributes', args?: MutationUpdateManyAttributesArgs[] | false, alias?: string  } 
  | { name: 'upsertAttribute', args?: MutationUpsertAttributeArgs[] | false, alias?: string  } 
  | { name: 'deleteAttribute', args?: MutationDeleteAttributeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAttributes', args?: MutationDeleteManyAttributesArgs[] | false, alias?: string  } 
  | { name: 'createOptionValue', args?: MutationCreateOptionValueArgs[] | false, alias?: string  } 
  | { name: 'updateOptionValue', args?: MutationUpdateOptionValueArgs[] | false, alias?: string  } 
  | { name: 'updateManyOptionValues', args?: MutationUpdateManyOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'upsertOptionValue', args?: MutationUpsertOptionValueArgs[] | false, alias?: string  } 
  | { name: 'deleteOptionValue', args?: MutationDeleteOptionValueArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOptionValues', args?: MutationDeleteManyOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'createOption', args?: MutationCreateOptionArgs[] | false, alias?: string  } 
  | { name: 'updateOption', args?: MutationUpdateOptionArgs[] | false, alias?: string  } 
  | { name: 'updateManyOptions', args?: MutationUpdateManyOptionsArgs[] | false, alias?: string  } 
  | { name: 'upsertOption', args?: MutationUpsertOptionArgs[] | false, alias?: string  } 
  | { name: 'deleteOption', args?: MutationDeleteOptionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOptions', args?: MutationDeleteManyOptionsArgs[] | false, alias?: string  } 
  | { name: 'createVariant', args?: MutationCreateVariantArgs[] | false, alias?: string  } 
  | { name: 'updateVariant', args?: MutationUpdateVariantArgs[] | false, alias?: string  } 
  | { name: 'updateManyVariants', args?: MutationUpdateManyVariantsArgs[] | false, alias?: string  } 
  | { name: 'upsertVariant', args?: MutationUpsertVariantArgs[] | false, alias?: string  } 
  | { name: 'deleteVariant', args?: MutationDeleteVariantArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVariants', args?: MutationDeleteManyVariantsArgs[] | false, alias?: string  } 
  | { name: 'createImage', args?: MutationCreateImageArgs[] | false, alias?: string  } 
  | { name: 'updateImage', args?: MutationUpdateImageArgs[] | false, alias?: string  } 
  | { name: 'updateManyImages', args?: MutationUpdateManyImagesArgs[] | false, alias?: string  } 
  | { name: 'upsertImage', args?: MutationUpsertImageArgs[] | false, alias?: string  } 
  | { name: 'deleteImage', args?: MutationDeleteImageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyImages', args?: MutationDeleteManyImagesArgs[] | false, alias?: string  } 
  | { name: 'createOrder', args?: MutationCreateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateOrder', args?: MutationUpdateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateManyOrders', args?: MutationUpdateManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'upsertOrder', args?: MutationUpsertOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteOrder', args?: MutationDeleteOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOrders', args?: MutationDeleteManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'createOrderLineItem', args?: MutationCreateOrderLineItemArgs[] | false, alias?: string  } 
  | { name: 'updateOrderLineItem', args?: MutationUpdateOrderLineItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyOrderLineItems', args?: MutationUpdateManyOrderLineItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertOrderLineItem', args?: MutationUpsertOrderLineItemArgs[] | false, alias?: string  } 
  | { name: 'deleteOrderLineItem', args?: MutationDeleteOrderLineItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOrderLineItems', args?: MutationDeleteManyOrderLineItemsArgs[] | false, alias?: string  } 
  | { name: 'createOrderOptionValues', args?: MutationCreateOrderOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'updateOrderOptionValues', args?: MutationUpdateOrderOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'updateManyOrderOptionValueses', args?: MutationUpdateManyOrderOptionValuesesArgs[] | false, alias?: string  } 
  | { name: 'upsertOrderOptionValues', args?: MutationUpsertOrderOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'deleteOrderOptionValues', args?: MutationDeleteOrderOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOrderOptionValueses', args?: MutationDeleteManyOrderOptionValuesesArgs[] | false, alias?: string  } 
  | { name: 'createPayment', args?: MutationCreatePaymentArgs[] | false, alias?: string  } 
  | { name: 'updatePayment', args?: MutationUpdatePaymentArgs[] | false, alias?: string  } 
  | { name: 'updateManyPayments', args?: MutationUpdateManyPaymentsArgs[] | false, alias?: string  } 
  | { name: 'upsertPayment', args?: MutationUpsertPaymentArgs[] | false, alias?: string  } 
  | { name: 'deletePayment', args?: MutationDeletePaymentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPayments', args?: MutationDeleteManyPaymentsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createCollection'
  | 'updateCollection'
  | 'updateManyCollections'
  | 'upsertCollection'
  | 'deleteCollection'
  | 'deleteManyCollections'
  | 'createCollectionRuleSet'
  | 'updateCollectionRuleSet'
  | 'updateManyCollectionRuleSets'
  | 'upsertCollectionRuleSet'
  | 'deleteCollectionRuleSet'
  | 'deleteManyCollectionRuleSets'
  | 'createCollectionRule'
  | 'updateCollectionRule'
  | 'updateManyCollectionRules'
  | 'upsertCollectionRule'
  | 'deleteCollectionRule'
  | 'deleteManyCollectionRules'
  | 'createProductType'
  | 'updateProductType'
  | 'updateManyProductTypes'
  | 'upsertProductType'
  | 'deleteProductType'
  | 'deleteManyProductTypes'
  | 'createProduct'
  | 'updateProduct'
  | 'updateManyProducts'
  | 'upsertProduct'
  | 'deleteProduct'
  | 'deleteManyProducts'
  | 'createBrand'
  | 'updateBrand'
  | 'updateManyBrands'
  | 'upsertBrand'
  | 'deleteBrand'
  | 'deleteManyBrands'
  | 'createAttribute'
  | 'updateAttribute'
  | 'updateManyAttributes'
  | 'upsertAttribute'
  | 'deleteAttribute'
  | 'deleteManyAttributes'
  | 'createOptionValue'
  | 'updateOptionValue'
  | 'updateManyOptionValues'
  | 'upsertOptionValue'
  | 'deleteOptionValue'
  | 'deleteManyOptionValues'
  | 'createOption'
  | 'updateOption'
  | 'updateManyOptions'
  | 'upsertOption'
  | 'deleteOption'
  | 'deleteManyOptions'
  | 'createVariant'
  | 'updateVariant'
  | 'updateManyVariants'
  | 'upsertVariant'
  | 'deleteVariant'
  | 'deleteManyVariants'
  | 'createImage'
  | 'updateImage'
  | 'updateManyImages'
  | 'upsertImage'
  | 'deleteImage'
  | 'deleteManyImages'
  | 'createOrder'
  | 'updateOrder'
  | 'updateManyOrders'
  | 'upsertOrder'
  | 'deleteOrder'
  | 'deleteManyOrders'
  | 'createOrderLineItem'
  | 'updateOrderLineItem'
  | 'updateManyOrderLineItems'
  | 'upsertOrderLineItem'
  | 'deleteOrderLineItem'
  | 'deleteManyOrderLineItems'
  | 'createOrderOptionValues'
  | 'updateOrderOptionValues'
  | 'updateManyOrderOptionValueses'
  | 'upsertOrderOptionValues'
  | 'deleteOrderOptionValues'
  | 'deleteManyOrderOptionValueses'
  | 'createPayment'
  | 'updatePayment'
  | 'updateManyPayments'
  | 'upsertPayment'
  | 'deletePayment'
  | 'deleteManyPayments'
  | 'createUser'
  | 'updateUser'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'


type MutationCreateCollectionArgs =
  | 'data'
type MutationUpdateCollectionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCollectionsArgs =
  | 'data'
  | 'where'
type MutationUpsertCollectionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCollectionArgs =
  | 'where'
type MutationDeleteManyCollectionsArgs =
  | 'where'
type MutationCreateCollectionRuleSetArgs =
  | 'data'
type MutationUpdateCollectionRuleSetArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCollectionRuleSetsArgs =
  | 'data'
  | 'where'
type MutationUpsertCollectionRuleSetArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCollectionRuleSetArgs =
  | 'where'
type MutationDeleteManyCollectionRuleSetsArgs =
  | 'where'
type MutationCreateCollectionRuleArgs =
  | 'data'
type MutationUpdateCollectionRuleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCollectionRulesArgs =
  | 'data'
  | 'where'
type MutationUpsertCollectionRuleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCollectionRuleArgs =
  | 'where'
type MutationDeleteManyCollectionRulesArgs =
  | 'where'
type MutationCreateProductTypeArgs =
  | 'data'
type MutationUpdateProductTypeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductTypesArgs =
  | 'data'
  | 'where'
type MutationUpsertProductTypeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductTypeArgs =
  | 'where'
type MutationDeleteManyProductTypesArgs =
  | 'where'
type MutationCreateProductArgs =
  | 'data'
type MutationUpdateProductArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProductsArgs =
  | 'data'
  | 'where'
type MutationUpsertProductArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProductArgs =
  | 'where'
type MutationDeleteManyProductsArgs =
  | 'where'
type MutationCreateBrandArgs =
  | 'data'
type MutationUpdateBrandArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBrandsArgs =
  | 'data'
  | 'where'
type MutationUpsertBrandArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBrandArgs =
  | 'where'
type MutationDeleteManyBrandsArgs =
  | 'where'
type MutationCreateAttributeArgs =
  | 'data'
type MutationUpdateAttributeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAttributesArgs =
  | 'data'
  | 'where'
type MutationUpsertAttributeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAttributeArgs =
  | 'where'
type MutationDeleteManyAttributesArgs =
  | 'where'
type MutationCreateOptionValueArgs =
  | 'data'
type MutationUpdateOptionValueArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOptionValuesArgs =
  | 'data'
  | 'where'
type MutationUpsertOptionValueArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOptionValueArgs =
  | 'where'
type MutationDeleteManyOptionValuesArgs =
  | 'where'
type MutationCreateOptionArgs =
  | 'data'
type MutationUpdateOptionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOptionsArgs =
  | 'data'
  | 'where'
type MutationUpsertOptionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOptionArgs =
  | 'where'
type MutationDeleteManyOptionsArgs =
  | 'where'
type MutationCreateVariantArgs =
  | 'data'
type MutationUpdateVariantArgs =
  | 'data'
  | 'where'
type MutationUpdateManyVariantsArgs =
  | 'data'
  | 'where'
type MutationUpsertVariantArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVariantArgs =
  | 'where'
type MutationDeleteManyVariantsArgs =
  | 'where'
type MutationCreateImageArgs =
  | 'data'
type MutationUpdateImageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyImagesArgs =
  | 'data'
  | 'where'
type MutationUpsertImageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteImageArgs =
  | 'where'
type MutationDeleteManyImagesArgs =
  | 'where'
type MutationCreateOrderArgs =
  | 'data'
type MutationUpdateOrderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOrdersArgs =
  | 'data'
  | 'where'
type MutationUpsertOrderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOrderArgs =
  | 'where'
type MutationDeleteManyOrdersArgs =
  | 'where'
type MutationCreateOrderLineItemArgs =
  | 'data'
type MutationUpdateOrderLineItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOrderLineItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertOrderLineItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOrderLineItemArgs =
  | 'where'
type MutationDeleteManyOrderLineItemsArgs =
  | 'where'
type MutationCreateOrderOptionValuesArgs =
  | 'data'
type MutationUpdateOrderOptionValuesArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOrderOptionValuesesArgs =
  | 'data'
  | 'where'
type MutationUpsertOrderOptionValuesArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOrderOptionValuesArgs =
  | 'where'
type MutationDeleteManyOrderOptionValuesesArgs =
  | 'where'
type MutationCreatePaymentArgs =
  | 'data'
type MutationUpdatePaymentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPaymentsArgs =
  | 'data'
  | 'where'
type MutationUpsertPaymentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePaymentArgs =
  | 'where'
type MutationDeleteManyPaymentsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createCollection: {
    type: 'Collection'
    args: Record<MutationCreateCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection> | prisma.Collection
  }
  updateCollection: {
    type: 'Collection'
    args: Record<MutationUpdateCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionUpdateInput, where: CollectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  updateManyCollections: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCollectionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionUpdateManyMutationInput, where?: CollectionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCollection: {
    type: 'Collection'
    args: Record<MutationUpsertCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionWhereUniqueInput, create: CollectionCreateInput, update: CollectionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection> | prisma.Collection
  }
  deleteCollection: {
    type: 'Collection'
    args: Record<MutationDeleteCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  deleteManyCollections: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCollectionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CollectionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCollectionRuleSet: {
    type: 'CollectionRuleSet'
    args: Record<MutationCreateCollectionRuleSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionRuleSetCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet> | prisma.CollectionRuleSet
  }
  updateCollectionRuleSet: {
    type: 'CollectionRuleSet'
    args: Record<MutationUpdateCollectionRuleSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionRuleSetUpdateInput, where: CollectionRuleSetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet | null> | prisma.CollectionRuleSet | null
  }
  updateManyCollectionRuleSets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCollectionRuleSetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionRuleSetUpdateManyMutationInput, where?: CollectionRuleSetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCollectionRuleSet: {
    type: 'CollectionRuleSet'
    args: Record<MutationUpsertCollectionRuleSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionRuleSetWhereUniqueInput, create: CollectionRuleSetCreateInput, update: CollectionRuleSetUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet> | prisma.CollectionRuleSet
  }
  deleteCollectionRuleSet: {
    type: 'CollectionRuleSet'
    args: Record<MutationDeleteCollectionRuleSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionRuleSetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet | null> | prisma.CollectionRuleSet | null
  }
  deleteManyCollectionRuleSets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCollectionRuleSetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CollectionRuleSetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCollectionRule: {
    type: 'CollectionRule'
    args: Record<MutationCreateCollectionRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionRuleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule> | prisma.CollectionRule
  }
  updateCollectionRule: {
    type: 'CollectionRule'
    args: Record<MutationUpdateCollectionRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionRuleUpdateInput, where: CollectionRuleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule | null> | prisma.CollectionRule | null
  }
  updateManyCollectionRules: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCollectionRulesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CollectionRuleUpdateManyMutationInput, where?: CollectionRuleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCollectionRule: {
    type: 'CollectionRule'
    args: Record<MutationUpsertCollectionRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionRuleWhereUniqueInput, create: CollectionRuleCreateInput, update: CollectionRuleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule> | prisma.CollectionRule
  }
  deleteCollectionRule: {
    type: 'CollectionRule'
    args: Record<MutationDeleteCollectionRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CollectionRuleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule | null> | prisma.CollectionRule | null
  }
  deleteManyCollectionRules: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCollectionRulesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CollectionRuleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProductType: {
    type: 'ProductType'
    args: Record<MutationCreateProductTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductTypeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType> | prisma.ProductType
  }
  updateProductType: {
    type: 'ProductType'
    args: Record<MutationUpdateProductTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductTypeUpdateInput, where: ProductTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType | null> | prisma.ProductType | null
  }
  updateManyProductTypes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductTypeUpdateManyMutationInput, where?: ProductTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProductType: {
    type: 'ProductType'
    args: Record<MutationUpsertProductTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductTypeWhereUniqueInput, create: ProductTypeCreateInput, update: ProductTypeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType> | prisma.ProductType
  }
  deleteProductType: {
    type: 'ProductType'
    args: Record<MutationDeleteProductTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType | null> | prisma.ProductType | null
  }
  deleteManyProductTypes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProduct: {
    type: 'Product'
    args: Record<MutationCreateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  updateProduct: {
    type: 'Product'
    args: Record<MutationUpdateProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateInput, where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updateManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProductUpdateManyMutationInput, where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProduct: {
    type: 'Product'
    args: Record<MutationUpsertProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput, create: ProductCreateInput, update: ProductUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product> | prisma.Product
  }
  deleteProduct: {
    type: 'Product'
    args: Record<MutationDeleteProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProductWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  deleteManyProducts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProductsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProductWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBrand: {
    type: 'Brand'
    args: Record<MutationCreateBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BrandCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand> | prisma.Brand
  }
  updateBrand: {
    type: 'Brand'
    args: Record<MutationUpdateBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BrandUpdateInput, where: BrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  updateManyBrands: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BrandUpdateManyMutationInput, where?: BrandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBrand: {
    type: 'Brand'
    args: Record<MutationUpsertBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BrandWhereUniqueInput, create: BrandCreateInput, update: BrandUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand> | prisma.Brand
  }
  deleteBrand: {
    type: 'Brand'
    args: Record<MutationDeleteBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  deleteManyBrands: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BrandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAttribute: {
    type: 'Attribute'
    args: Record<MutationCreateAttributeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttributeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute> | prisma.Attribute
  }
  updateAttribute: {
    type: 'Attribute'
    args: Record<MutationUpdateAttributeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttributeUpdateInput, where: AttributeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute | null> | prisma.Attribute | null
  }
  updateManyAttributes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAttributesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttributeUpdateManyMutationInput, where?: AttributeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAttribute: {
    type: 'Attribute'
    args: Record<MutationUpsertAttributeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttributeWhereUniqueInput, create: AttributeCreateInput, update: AttributeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute> | prisma.Attribute
  }
  deleteAttribute: {
    type: 'Attribute'
    args: Record<MutationDeleteAttributeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttributeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute | null> | prisma.Attribute | null
  }
  deleteManyAttributes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAttributesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AttributeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOptionValue: {
    type: 'OptionValue'
    args: Record<MutationCreateOptionValueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OptionValueCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue> | prisma.OptionValue
  }
  updateOptionValue: {
    type: 'OptionValue'
    args: Record<MutationUpdateOptionValueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OptionValueUpdateInput, where: OptionValueWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue | null> | prisma.OptionValue | null
  }
  updateManyOptionValues: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OptionValueUpdateManyMutationInput, where?: OptionValueWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOptionValue: {
    type: 'OptionValue'
    args: Record<MutationUpsertOptionValueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OptionValueWhereUniqueInput, create: OptionValueCreateInput, update: OptionValueUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue> | prisma.OptionValue
  }
  deleteOptionValue: {
    type: 'OptionValue'
    args: Record<MutationDeleteOptionValueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OptionValueWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue | null> | prisma.OptionValue | null
  }
  deleteManyOptionValues: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OptionValueWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOption: {
    type: 'Option'
    args: Record<MutationCreateOptionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OptionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option> | prisma.Option
  }
  updateOption: {
    type: 'Option'
    args: Record<MutationUpdateOptionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OptionUpdateInput, where: OptionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option | null> | prisma.Option | null
  }
  updateManyOptions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOptionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OptionUpdateManyMutationInput, where?: OptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOption: {
    type: 'Option'
    args: Record<MutationUpsertOptionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OptionWhereUniqueInput, create: OptionCreateInput, update: OptionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option> | prisma.Option
  }
  deleteOption: {
    type: 'Option'
    args: Record<MutationDeleteOptionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OptionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option | null> | prisma.Option | null
  }
  deleteManyOptions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOptionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVariant: {
    type: 'Variant'
    args: Record<MutationCreateVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VariantCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant> | prisma.Variant
  }
  updateVariant: {
    type: 'Variant'
    args: Record<MutationUpdateVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VariantUpdateInput, where: VariantWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  updateManyVariants: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VariantUpdateManyMutationInput, where?: VariantWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertVariant: {
    type: 'Variant'
    args: Record<MutationUpsertVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VariantWhereUniqueInput, create: VariantCreateInput, update: VariantUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant> | prisma.Variant
  }
  deleteVariant: {
    type: 'Variant'
    args: Record<MutationDeleteVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VariantWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  deleteManyVariants: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVariantsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VariantWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createImage: {
    type: 'Image'
    args: Record<MutationCreateImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  updateImage: {
    type: 'Image'
    args: Record<MutationUpdateImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImageUpdateInput, where: ImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  updateManyImages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImageUpdateManyMutationInput, where?: ImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertImage: {
    type: 'Image'
    args: Record<MutationUpsertImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ImageWhereUniqueInput, create: ImageCreateInput, update: ImageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image> | prisma.Image
  }
  deleteImage: {
    type: 'Image'
    args: Record<MutationDeleteImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ImageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  deleteManyImages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyImagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ImageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrder: {
    type: 'Order'
    args: Record<MutationCreateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  updateOrder: {
    type: 'Order'
    args: Record<MutationUpdateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateInput, where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updateManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateManyMutationInput, where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrder: {
    type: 'Order'
    args: Record<MutationUpsertOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput, create: OrderCreateInput, update: OrderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  deleteOrder: {
    type: 'Order'
    args: Record<MutationDeleteOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  deleteManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrderLineItem: {
    type: 'OrderLineItem'
    args: Record<MutationCreateOrderLineItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderLineItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem> | prisma.OrderLineItem
  }
  updateOrderLineItem: {
    type: 'OrderLineItem'
    args: Record<MutationUpdateOrderLineItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderLineItemUpdateInput, where: OrderLineItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem | null> | prisma.OrderLineItem | null
  }
  updateManyOrderLineItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrderLineItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderLineItemUpdateManyMutationInput, where?: OrderLineItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrderLineItem: {
    type: 'OrderLineItem'
    args: Record<MutationUpsertOrderLineItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderLineItemWhereUniqueInput, create: OrderLineItemCreateInput, update: OrderLineItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem> | prisma.OrderLineItem
  }
  deleteOrderLineItem: {
    type: 'OrderLineItem'
    args: Record<MutationDeleteOrderLineItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderLineItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem | null> | prisma.OrderLineItem | null
  }
  deleteManyOrderLineItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrderLineItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OrderLineItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrderOptionValues: {
    type: 'OrderOptionValues'
    args: Record<MutationCreateOrderOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderOptionValuesCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues> | prisma.OrderOptionValues
  }
  updateOrderOptionValues: {
    type: 'OrderOptionValues'
    args: Record<MutationUpdateOrderOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderOptionValuesUpdateInput, where: OrderOptionValuesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues | null> | prisma.OrderOptionValues | null
  }
  updateManyOrderOptionValueses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrderOptionValuesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderOptionValuesUpdateManyMutationInput, where?: OrderOptionValuesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrderOptionValues: {
    type: 'OrderOptionValues'
    args: Record<MutationUpsertOrderOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderOptionValuesWhereUniqueInput, create: OrderOptionValuesCreateInput, update: OrderOptionValuesUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues> | prisma.OrderOptionValues
  }
  deleteOrderOptionValues: {
    type: 'OrderOptionValues'
    args: Record<MutationDeleteOrderOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderOptionValuesWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues | null> | prisma.OrderOptionValues | null
  }
  deleteManyOrderOptionValueses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrderOptionValuesesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OrderOptionValuesWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPayment: {
    type: 'Payment'
    args: Record<MutationCreatePaymentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PaymentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment> | prisma.Payment
  }
  updatePayment: {
    type: 'Payment'
    args: Record<MutationUpdatePaymentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PaymentUpdateInput, where: PaymentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment | null> | prisma.Payment | null
  }
  updateManyPayments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPaymentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PaymentUpdateManyMutationInput, where?: PaymentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPayment: {
    type: 'Payment'
    args: Record<MutationUpsertPaymentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PaymentWhereUniqueInput, create: PaymentCreateInput, update: PaymentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment> | prisma.Payment
  }
  deletePayment: {
    type: 'Payment'
    args: Record<MutationDeletePaymentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PaymentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment | null> | prisma.Payment | null
  }
  deleteManyPayments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPaymentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PaymentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'collection', args?: SubscriptionCollectionArgs[] | false, alias?: string  } 
  | { name: 'collectionRuleSet', args?: SubscriptionCollectionRuleSetArgs[] | false, alias?: string  } 
  | { name: 'collectionRule', args?: SubscriptionCollectionRuleArgs[] | false, alias?: string  } 
  | { name: 'productType', args?: SubscriptionProductTypeArgs[] | false, alias?: string  } 
  | { name: 'product', args?: SubscriptionProductArgs[] | false, alias?: string  } 
  | { name: 'brand', args?: SubscriptionBrandArgs[] | false, alias?: string  } 
  | { name: 'attribute', args?: SubscriptionAttributeArgs[] | false, alias?: string  } 
  | { name: 'optionValue', args?: SubscriptionOptionValueArgs[] | false, alias?: string  } 
  | { name: 'option', args?: SubscriptionOptionArgs[] | false, alias?: string  } 
  | { name: 'variant', args?: SubscriptionVariantArgs[] | false, alias?: string  } 
  | { name: 'image', args?: SubscriptionImageArgs[] | false, alias?: string  } 
  | { name: 'order', args?: SubscriptionOrderArgs[] | false, alias?: string  } 
  | { name: 'orderLineItem', args?: SubscriptionOrderLineItemArgs[] | false, alias?: string  } 
  | { name: 'orderOptionValues', args?: SubscriptionOrderOptionValuesArgs[] | false, alias?: string  } 
  | { name: 'payment', args?: SubscriptionPaymentArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'collection'
  | 'collectionRuleSet'
  | 'collectionRule'
  | 'productType'
  | 'product'
  | 'brand'
  | 'attribute'
  | 'optionValue'
  | 'option'
  | 'variant'
  | 'image'
  | 'order'
  | 'orderLineItem'
  | 'orderOptionValues'
  | 'payment'
  | 'user'


type SubscriptionCollectionArgs =
  | 'where'
type SubscriptionCollectionRuleSetArgs =
  | 'where'
type SubscriptionCollectionRuleArgs =
  | 'where'
type SubscriptionProductTypeArgs =
  | 'where'
type SubscriptionProductArgs =
  | 'where'
type SubscriptionBrandArgs =
  | 'where'
type SubscriptionAttributeArgs =
  | 'where'
type SubscriptionOptionValueArgs =
  | 'where'
type SubscriptionOptionArgs =
  | 'where'
type SubscriptionVariantArgs =
  | 'where'
type SubscriptionImageArgs =
  | 'where'
type SubscriptionOrderArgs =
  | 'where'
type SubscriptionOrderLineItemArgs =
  | 'where'
type SubscriptionOrderOptionValuesArgs =
  | 'where'
type SubscriptionPaymentArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  collection: {
    type: 'CollectionSubscriptionPayload'
    args: Record<SubscriptionCollectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CollectionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionSubscriptionPayload | null> | prisma.CollectionSubscriptionPayload | null
  }
  collectionRuleSet: {
    type: 'CollectionRuleSetSubscriptionPayload'
    args: Record<SubscriptionCollectionRuleSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CollectionRuleSetSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSetSubscriptionPayload | null> | prisma.CollectionRuleSetSubscriptionPayload | null
  }
  collectionRule: {
    type: 'CollectionRuleSubscriptionPayload'
    args: Record<SubscriptionCollectionRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CollectionRuleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSubscriptionPayload | null> | prisma.CollectionRuleSubscriptionPayload | null
  }
  productType: {
    type: 'ProductTypeSubscriptionPayload'
    args: Record<SubscriptionProductTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductTypeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductTypeSubscriptionPayload | null> | prisma.ProductTypeSubscriptionPayload | null
  }
  product: {
    type: 'ProductSubscriptionPayload'
    args: Record<SubscriptionProductArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProductSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductSubscriptionPayload | null> | prisma.ProductSubscriptionPayload | null
  }
  brand: {
    type: 'BrandSubscriptionPayload'
    args: Record<SubscriptionBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BrandSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandSubscriptionPayload | null> | prisma.BrandSubscriptionPayload | null
  }
  attribute: {
    type: 'AttributeSubscriptionPayload'
    args: Record<SubscriptionAttributeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AttributeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttributeSubscriptionPayload | null> | prisma.AttributeSubscriptionPayload | null
  }
  optionValue: {
    type: 'OptionValueSubscriptionPayload'
    args: Record<SubscriptionOptionValueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OptionValueSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValueSubscriptionPayload | null> | prisma.OptionValueSubscriptionPayload | null
  }
  option: {
    type: 'OptionSubscriptionPayload'
    args: Record<SubscriptionOptionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OptionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionSubscriptionPayload | null> | prisma.OptionSubscriptionPayload | null
  }
  variant: {
    type: 'VariantSubscriptionPayload'
    args: Record<SubscriptionVariantArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VariantSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantSubscriptionPayload | null> | prisma.VariantSubscriptionPayload | null
  }
  image: {
    type: 'ImageSubscriptionPayload'
    args: Record<SubscriptionImageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ImageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImageSubscriptionPayload | null> | prisma.ImageSubscriptionPayload | null
  }
  order: {
    type: 'OrderSubscriptionPayload'
    args: Record<SubscriptionOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OrderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderSubscriptionPayload | null> | prisma.OrderSubscriptionPayload | null
  }
  orderLineItem: {
    type: 'OrderLineItemSubscriptionPayload'
    args: Record<SubscriptionOrderLineItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OrderLineItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItemSubscriptionPayload | null> | prisma.OrderLineItemSubscriptionPayload | null
  }
  orderOptionValues: {
    type: 'OrderOptionValuesSubscriptionPayload'
    args: Record<SubscriptionOrderOptionValuesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OrderOptionValuesSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValuesSubscriptionPayload | null> | prisma.OrderOptionValuesSubscriptionPayload | null
  }
  payment: {
    type: 'PaymentSubscriptionPayload'
    args: Record<SubscriptionPaymentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PaymentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentSubscriptionPayload | null> | prisma.PaymentSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
}
  

// Types for CollectionSubscriptionPayload

type CollectionSubscriptionPayloadObject =
  | CollectionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CollectionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CollectionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Collection'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Collection | null> | prisma.Collection | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CollectionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionPreviousValues | null> | prisma.CollectionPreviousValues | null
  }
}
  

// Types for CollectionPreviousValues

type CollectionPreviousValuesObject =
  | CollectionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type CollectionPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface CollectionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CollectionRuleSetSubscriptionPayload

type CollectionRuleSetSubscriptionPayloadObject =
  | CollectionRuleSetSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CollectionRuleSetSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CollectionRuleSetSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleSetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CollectionRuleSet'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionRuleSetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSet | null> | prisma.CollectionRuleSet | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CollectionRuleSetPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionRuleSetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleSetPreviousValues | null> | prisma.CollectionRuleSetPreviousValues | null
  }
}
  

// Types for CollectionRuleSetPreviousValues

type CollectionRuleSetPreviousValuesObject =
  | CollectionRuleSetPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'appliesDisjunctively', args?: [] | false, alias?: string  } 

type CollectionRuleSetPreviousValuesFields =
  | 'id'
  | 'appliesDisjunctively'



  

export interface CollectionRuleSetPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  appliesDisjunctively: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CollectionRuleSubscriptionPayload

type CollectionRuleSubscriptionPayloadObject =
  | CollectionRuleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CollectionRuleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CollectionRuleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRuleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CollectionRule'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionRuleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRule | null> | prisma.CollectionRule | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CollectionRulePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CollectionRuleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRulePreviousValues | null> | prisma.CollectionRulePreviousValues | null
  }
}
  

// Types for CollectionRulePreviousValues

type CollectionRulePreviousValuesObject =
  | CollectionRulePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'field', args?: [] | false, alias?: string  } 
  | { name: 'relation', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type CollectionRulePreviousValuesFields =
  | 'id'
  | 'field'
  | 'relation'
  | 'value'



  

export interface CollectionRulePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  field: {
    type: 'CollectionRuleField'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRulePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleField> | prisma.CollectionRuleField
  }
  relation: {
    type: 'CollectionRuleRelation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CollectionRulePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CollectionRuleRelation> | prisma.CollectionRuleRelation
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductTypeSubscriptionPayload

type ProductTypeSubscriptionPayloadObject =
  | ProductTypeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductTypeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductTypeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProductType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductType | null> | prisma.ProductType | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductTypePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductTypePreviousValues | null> | prisma.ProductTypePreviousValues | null
  }
}
  

// Types for ProductTypePreviousValues

type ProductTypePreviousValuesObject =
  | ProductTypePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type ProductTypePreviousValuesFields =
  | 'id'
  | 'name'



  

export interface ProductTypePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProductSubscriptionPayload

type ProductSubscriptionPayloadObject =
  | ProductSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProductSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProductSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Product'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Product | null> | prisma.Product | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProductPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProductSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProductPreviousValues | null> | prisma.ProductPreviousValues | null
  }
}
  

// Types for ProductPreviousValues

type ProductPreviousValuesObject =
  | ProductPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'slug', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type ProductPreviousValuesFields =
  | 'id'
  | 'slug'
  | 'name'
  | 'description'



  

export interface ProductPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  slug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BrandSubscriptionPayload

type BrandSubscriptionPayloadObject =
  | BrandSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BrandSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BrandSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Brand'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Brand | null> | prisma.Brand | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BrandPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BrandPreviousValues | null> | prisma.BrandPreviousValues | null
  }
}
  

// Types for BrandPreviousValues

type BrandPreviousValuesObject =
  | BrandPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type BrandPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface BrandPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttributeSubscriptionPayload

type AttributeSubscriptionPayloadObject =
  | AttributeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AttributeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AttributeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttributeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Attribute'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttributeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attribute | null> | prisma.Attribute | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AttributePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttributeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttributePreviousValues | null> | prisma.AttributePreviousValues | null
  }
}
  

// Types for AttributePreviousValues

type AttributePreviousValuesObject =
  | AttributePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'key', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type AttributePreviousValuesFields =
  | 'id'
  | 'key'
  | 'value'



  

export interface AttributePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OptionValueSubscriptionPayload

type OptionValueSubscriptionPayloadObject =
  | OptionValueSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OptionValueSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OptionValueSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionValueSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'OptionValue'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OptionValueSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValue | null> | prisma.OptionValue | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OptionValuePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OptionValueSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionValuePreviousValues | null> | prisma.OptionValuePreviousValues | null
  }
}
  

// Types for OptionValuePreviousValues

type OptionValuePreviousValuesObject =
  | OptionValuePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type OptionValuePreviousValuesFields =
  | 'id'
  | 'name'



  

export interface OptionValuePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OptionSubscriptionPayload

type OptionSubscriptionPayloadObject =
  | OptionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OptionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OptionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OptionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Option'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OptionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Option | null> | prisma.Option | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OptionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OptionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OptionPreviousValues | null> | prisma.OptionPreviousValues | null
  }
}
  

// Types for OptionPreviousValues

type OptionPreviousValuesObject =
  | OptionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'isColor', args?: [] | false, alias?: string  } 

type OptionPreviousValuesFields =
  | 'id'
  | 'name'
  | 'isColor'



  

export interface OptionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isColor: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VariantSubscriptionPayload

type VariantSubscriptionPayloadObject =
  | VariantSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VariantSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VariantSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VariantSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Variant'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VariantSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Variant | null> | prisma.Variant | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VariantPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VariantSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VariantPreviousValues | null> | prisma.VariantPreviousValues | null
  }
}
  

// Types for VariantPreviousValues

type VariantPreviousValuesObject =
  | VariantPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'availableForSale', args?: [] | false, alias?: string  } 
  | { name: 'sku', args?: [] | false, alias?: string  } 

type VariantPreviousValuesFields =
  | 'id'
  | 'price'
  | 'availableForSale'
  | 'sku'



  

export interface VariantPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  price: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  availableForSale: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  sku: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ImageSubscriptionPayload

type ImageSubscriptionPayloadObject =
  | ImageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ImageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ImageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Image'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Image | null> | prisma.Image | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ImagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImagePreviousValues | null> | prisma.ImagePreviousValues | null
  }
}
  

// Types for ImagePreviousValues

type ImagePreviousValuesObject =
  | ImagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type ImagePreviousValuesFields =
  | 'id'
  | 'url'



  

export interface ImagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderSubscriptionPayload

type OrderSubscriptionPayloadObject =
  | OrderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OrderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OrderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderPreviousValues | null> | prisma.OrderPreviousValues | null
  }
}
  

// Types for OrderPreviousValues

type OrderPreviousValuesObject =
  | OrderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'subTotalBeforeTax', args?: [] | false, alias?: string  } 
  | { name: 'subTotal', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 

type OrderPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'subTotalBeforeTax'
  | 'subTotal'
  | 'state'



  

export interface OrderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subTotalBeforeTax: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subTotal: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  state: {
    type: 'OrderState'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderState> | prisma.OrderState
  }
}
  

// Types for OrderLineItemSubscriptionPayload

type OrderLineItemSubscriptionPayloadObject =
  | OrderLineItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OrderLineItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OrderLineItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderLineItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'OrderLineItem'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderLineItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItem | null> | prisma.OrderLineItem | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrderLineItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderLineItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderLineItemPreviousValues | null> | prisma.OrderLineItemPreviousValues | null
  }
}
  

// Types for OrderLineItemPreviousValues

type OrderLineItemPreviousValuesObject =
  | OrderLineItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'unitPrice', args?: [] | false, alias?: string  } 
  | { name: 'sku', args?: [] | false, alias?: string  } 

type OrderLineItemPreviousValuesFields =
  | 'id'
  | 'quantity'
  | 'unitPrice'
  | 'sku'



  

export interface OrderLineItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  quantity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  unitPrice: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sku: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for OrderOptionValuesSubscriptionPayload

type OrderOptionValuesSubscriptionPayloadObject =
  | OrderOptionValuesSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OrderOptionValuesSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OrderOptionValuesSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderOptionValuesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'OrderOptionValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderOptionValuesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValues | null> | prisma.OrderOptionValues | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrderOptionValuesPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderOptionValuesSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderOptionValuesPreviousValues | null> | prisma.OrderOptionValuesPreviousValues | null
  }
}
  

// Types for OrderOptionValuesPreviousValues

type OrderOptionValuesPreviousValuesObject =
  | OrderOptionValuesPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'optionName', args?: [] | false, alias?: string  } 
  | { name: 'optionValue', args?: [] | false, alias?: string  } 

type OrderOptionValuesPreviousValuesFields =
  | 'id'
  | 'optionName'
  | 'optionValue'



  

export interface OrderOptionValuesPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  optionName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  optionValue: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PaymentSubscriptionPayload

type PaymentSubscriptionPayloadObject =
  | PaymentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PaymentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PaymentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Payment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PaymentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Payment | null> | prisma.Payment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PaymentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PaymentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentPreviousValues | null> | prisma.PaymentPreviousValues | null
  }
}
  

// Types for PaymentPreviousValues

type PaymentPreviousValuesObject =
  | PaymentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'method', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'currencyCode', args?: [] | false, alias?: string  } 

type PaymentPreviousValuesFields =
  | 'id'
  | 'method'
  | 'amount'
  | 'state'
  | 'currencyCode'



  

export interface PaymentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  method: {
    type: 'PaymentMethod'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentMethod> | prisma.PaymentMethod
  }
  amount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  state: {
    type: 'PaymentState'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PaymentState> | prisma.PaymentState
  }
  currencyCode: {
    type: 'CurrencyCode'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PaymentPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CurrencyCode> | prisma.CurrencyCode
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface CollectionWhereUniqueInput {
  id?: string | null
}
export type CollectionWhereUniqueInputInputObject =
  | Extract<keyof CollectionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CollectionRuleWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  field?: prisma.CollectionRuleField | null
  field_not?: prisma.CollectionRuleField | null
  field_in?: prisma.CollectionRuleField[]
  field_not_in?: prisma.CollectionRuleField[]
  relation?: prisma.CollectionRuleRelation | null
  relation_not?: prisma.CollectionRuleRelation | null
  relation_in?: prisma.CollectionRuleRelation[]
  relation_not_in?: prisma.CollectionRuleRelation[]
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  AND?: CollectionRuleWhereInput[]
  OR?: CollectionRuleWhereInput[]
  NOT?: CollectionRuleWhereInput[]
}
export type CollectionRuleWhereInputInputObject =
  | Extract<keyof CollectionRuleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'field', alias?: string  } 
  | { name: 'field_not', alias?: string  } 
  | { name: 'field_in', alias?: string  } 
  | { name: 'field_not_in', alias?: string  } 
  | { name: 'relation', alias?: string  } 
  | { name: 'relation_not', alias?: string  } 
  | { name: 'relation_in', alias?: string  } 
  | { name: 'relation_not_in', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  brand?: BrandWhereInput | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  type?: ProductTypeWhereInput | null
  thumbnail?: ImageWhereInput | null
  variants_every?: VariantWhereInput | null
  variants_some?: VariantWhereInput | null
  variants_none?: VariantWhereInput | null
  collections_every?: CollectionWhereInput | null
  collections_some?: CollectionWhereInput | null
  collections_none?: CollectionWhereInput | null
  attributes_every?: AttributeWhereInput | null
  attributes_some?: AttributeWhereInput | null
  attributes_none?: AttributeWhereInput | null
  AND?: ProductWhereInput[]
  OR?: ProductWhereInput[]
  NOT?: ProductWhereInput[]
}
export type ProductWhereInputInputObject =
  | Extract<keyof ProductWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants_every', alias?: string  } 
  | { name: 'variants_some', alias?: string  } 
  | { name: 'variants_none', alias?: string  } 
  | { name: 'collections_every', alias?: string  } 
  | { name: 'collections_some', alias?: string  } 
  | { name: 'collections_none', alias?: string  } 
  | { name: 'attributes_every', alias?: string  } 
  | { name: 'attributes_some', alias?: string  } 
  | { name: 'attributes_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BrandWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  AND?: BrandWhereInput[]
  OR?: BrandWhereInput[]
  NOT?: BrandWhereInput[]
}
export type BrandWhereInputInputObject =
  | Extract<keyof BrandWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductTypeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: ProductTypeWhereInput[]
  OR?: ProductTypeWhereInput[]
  NOT?: ProductTypeWhereInput[]
}
export type ProductTypeWhereInputInputObject =
  | Extract<keyof ProductTypeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ImageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  AND?: ImageWhereInput[]
  OR?: ImageWhereInput[]
  NOT?: ImageWhereInput[]
}
export type ImageWhereInputInputObject =
  | Extract<keyof ImageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VariantWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  optionValues_every?: OptionValueWhereInput | null
  optionValues_some?: OptionValueWhereInput | null
  optionValues_none?: OptionValueWhereInput | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  availableForSale?: boolean | null
  availableForSale_not?: boolean | null
  sku?: string | null
  sku_not?: string | null
  sku_in?: string[]
  sku_not_in?: string[]
  sku_lt?: string | null
  sku_lte?: string | null
  sku_gt?: string | null
  sku_gte?: string | null
  sku_contains?: string | null
  sku_not_contains?: string | null
  sku_starts_with?: string | null
  sku_not_starts_with?: string | null
  sku_ends_with?: string | null
  sku_not_ends_with?: string | null
  images_every?: ImageWhereInput | null
  images_some?: ImageWhereInput | null
  images_none?: ImageWhereInput | null
  AND?: VariantWhereInput[]
  OR?: VariantWhereInput[]
  NOT?: VariantWhereInput[]
}
export type VariantWhereInputInputObject =
  | Extract<keyof VariantWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'optionValues_every', alias?: string  } 
  | { name: 'optionValues_some', alias?: string  } 
  | { name: 'optionValues_none', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'availableForSale', alias?: string  } 
  | { name: 'availableForSale_not', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'sku_not', alias?: string  } 
  | { name: 'sku_in', alias?: string  } 
  | { name: 'sku_not_in', alias?: string  } 
  | { name: 'sku_lt', alias?: string  } 
  | { name: 'sku_lte', alias?: string  } 
  | { name: 'sku_gt', alias?: string  } 
  | { name: 'sku_gte', alias?: string  } 
  | { name: 'sku_contains', alias?: string  } 
  | { name: 'sku_not_contains', alias?: string  } 
  | { name: 'sku_starts_with', alias?: string  } 
  | { name: 'sku_not_starts_with', alias?: string  } 
  | { name: 'sku_ends_with', alias?: string  } 
  | { name: 'sku_not_ends_with', alias?: string  } 
  | { name: 'images_every', alias?: string  } 
  | { name: 'images_some', alias?: string  } 
  | { name: 'images_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OptionValueWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  option?: OptionWhereInput | null
  AND?: OptionValueWhereInput[]
  OR?: OptionValueWhereInput[]
  NOT?: OptionValueWhereInput[]
}
export type OptionValueWhereInputInputObject =
  | Extract<keyof OptionValueWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'option', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OptionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  isColor?: boolean | null
  isColor_not?: boolean | null
  values_every?: OptionValueWhereInput | null
  values_some?: OptionValueWhereInput | null
  values_none?: OptionValueWhereInput | null
  AND?: OptionWhereInput[]
  OR?: OptionWhereInput[]
  NOT?: OptionWhereInput[]
}
export type OptionWhereInputInputObject =
  | Extract<keyof OptionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'isColor', alias?: string  } 
  | { name: 'isColor_not', alias?: string  } 
  | { name: 'values_every', alias?: string  } 
  | { name: 'values_some', alias?: string  } 
  | { name: 'values_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  rules?: CollectionRuleSetWhereInput | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  AND?: CollectionWhereInput[]
  OR?: CollectionWhereInput[]
  NOT?: CollectionWhereInput[]
}
export type CollectionWhereInputInputObject =
  | Extract<keyof CollectionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionRuleSetWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  rules_every?: CollectionRuleWhereInput | null
  rules_some?: CollectionRuleWhereInput | null
  rules_none?: CollectionRuleWhereInput | null
  appliesDisjunctively?: boolean | null
  appliesDisjunctively_not?: boolean | null
  AND?: CollectionRuleSetWhereInput[]
  OR?: CollectionRuleSetWhereInput[]
  NOT?: CollectionRuleSetWhereInput[]
}
export type CollectionRuleSetWhereInputInputObject =
  | Extract<keyof CollectionRuleSetWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'rules_every', alias?: string  } 
  | { name: 'rules_some', alias?: string  } 
  | { name: 'rules_none', alias?: string  } 
  | { name: 'appliesDisjunctively', alias?: string  } 
  | { name: 'appliesDisjunctively_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttributeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  key?: string | null
  key_not?: string | null
  key_in?: string[]
  key_not_in?: string[]
  key_lt?: string | null
  key_lte?: string | null
  key_gt?: string | null
  key_gte?: string | null
  key_contains?: string | null
  key_not_contains?: string | null
  key_starts_with?: string | null
  key_not_starts_with?: string | null
  key_ends_with?: string | null
  key_not_ends_with?: string | null
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  products_every?: ProductWhereInput | null
  products_some?: ProductWhereInput | null
  products_none?: ProductWhereInput | null
  AND?: AttributeWhereInput[]
  OR?: AttributeWhereInput[]
  NOT?: AttributeWhereInput[]
}
export type AttributeWhereInputInputObject =
  | Extract<keyof AttributeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'key_not', alias?: string  } 
  | { name: 'key_in', alias?: string  } 
  | { name: 'key_not_in', alias?: string  } 
  | { name: 'key_lt', alias?: string  } 
  | { name: 'key_lte', alias?: string  } 
  | { name: 'key_gt', alias?: string  } 
  | { name: 'key_gte', alias?: string  } 
  | { name: 'key_contains', alias?: string  } 
  | { name: 'key_not_contains', alias?: string  } 
  | { name: 'key_starts_with', alias?: string  } 
  | { name: 'key_not_starts_with', alias?: string  } 
  | { name: 'key_ends_with', alias?: string  } 
  | { name: 'key_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'products_every', alias?: string  } 
  | { name: 'products_some', alias?: string  } 
  | { name: 'products_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionRuleSetWhereUniqueInput {
  id?: string | null
}
export type CollectionRuleSetWhereUniqueInputInputObject =
  | Extract<keyof CollectionRuleSetWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CollectionRuleWhereUniqueInput {
  id?: string | null
}
export type CollectionRuleWhereUniqueInputInputObject =
  | Extract<keyof CollectionRuleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProductTypeWhereUniqueInput {
  id?: string | null
}
export type ProductTypeWhereUniqueInputInputObject =
  | Extract<keyof ProductTypeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProductWhereUniqueInput {
  id?: string | null
  slug?: string | null
}
export type ProductWhereUniqueInputInputObject =
  | Extract<keyof ProductWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  
export interface BrandWhereUniqueInput {
  id?: string | null
}
export type BrandWhereUniqueInputInputObject =
  | Extract<keyof BrandWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AttributeWhereUniqueInput {
  id?: string | null
}
export type AttributeWhereUniqueInputInputObject =
  | Extract<keyof AttributeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OptionValueWhereUniqueInput {
  id?: string | null
}
export type OptionValueWhereUniqueInputInputObject =
  | Extract<keyof OptionValueWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OptionWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type OptionWhereUniqueInputInputObject =
  | Extract<keyof OptionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface VariantWhereUniqueInput {
  id?: string | null
}
export type VariantWhereUniqueInputInputObject =
  | Extract<keyof VariantWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ImageWhereUniqueInput {
  id?: string | null
}
export type ImageWhereUniqueInputInputObject =
  | Extract<keyof ImageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OrderWhereUniqueInput {
  id?: string | null
}
export type OrderWhereUniqueInputInputObject =
  | Extract<keyof OrderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OrderLineItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  owner?: UserWhereInput | null
  image?: ImageWhereInput | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  unitPrice?: number | null
  unitPrice_not?: number | null
  unitPrice_in?: number[]
  unitPrice_not_in?: number[]
  unitPrice_lt?: number | null
  unitPrice_lte?: number | null
  unitPrice_gt?: number | null
  unitPrice_gte?: number | null
  sku?: string | null
  sku_not?: string | null
  sku_in?: string[]
  sku_not_in?: string[]
  sku_lt?: string | null
  sku_lte?: string | null
  sku_gt?: string | null
  sku_gte?: string | null
  sku_contains?: string | null
  sku_not_contains?: string | null
  sku_starts_with?: string | null
  sku_not_starts_with?: string | null
  sku_ends_with?: string | null
  sku_not_ends_with?: string | null
  orderOptionValues_every?: OrderOptionValuesWhereInput | null
  orderOptionValues_some?: OrderOptionValuesWhereInput | null
  orderOptionValues_none?: OrderOptionValuesWhereInput | null
  AND?: OrderLineItemWhereInput[]
  OR?: OrderLineItemWhereInput[]
  NOT?: OrderLineItemWhereInput[]
}
export type OrderLineItemWhereInputInputObject =
  | Extract<keyof OrderLineItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'unitPrice_not', alias?: string  } 
  | { name: 'unitPrice_in', alias?: string  } 
  | { name: 'unitPrice_not_in', alias?: string  } 
  | { name: 'unitPrice_lt', alias?: string  } 
  | { name: 'unitPrice_lte', alias?: string  } 
  | { name: 'unitPrice_gt', alias?: string  } 
  | { name: 'unitPrice_gte', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'sku_not', alias?: string  } 
  | { name: 'sku_in', alias?: string  } 
  | { name: 'sku_not_in', alias?: string  } 
  | { name: 'sku_lt', alias?: string  } 
  | { name: 'sku_lte', alias?: string  } 
  | { name: 'sku_gt', alias?: string  } 
  | { name: 'sku_gte', alias?: string  } 
  | { name: 'sku_contains', alias?: string  } 
  | { name: 'sku_not_contains', alias?: string  } 
  | { name: 'sku_starts_with', alias?: string  } 
  | { name: 'sku_not_starts_with', alias?: string  } 
  | { name: 'sku_ends_with', alias?: string  } 
  | { name: 'sku_not_ends_with', alias?: string  } 
  | { name: 'orderOptionValues_every', alias?: string  } 
  | { name: 'orderOptionValues_some', alias?: string  } 
  | { name: 'orderOptionValues_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  orders_every?: OrderWhereInput | null
  orders_some?: OrderWhereInput | null
  orders_none?: OrderWhereInput | null
  cart_every?: VariantWhereInput | null
  cart_some?: VariantWhereInput | null
  cart_none?: VariantWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'orders_every', alias?: string  } 
  | { name: 'orders_some', alias?: string  } 
  | { name: 'orders_none', alias?: string  } 
  | { name: 'cart_every', alias?: string  } 
  | { name: 'cart_some', alias?: string  } 
  | { name: 'cart_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  items_every?: OrderLineItemWhereInput | null
  items_some?: OrderLineItemWhereInput | null
  items_none?: OrderLineItemWhereInput | null
  customer?: UserWhereInput | null
  subTotalBeforeTax?: number | null
  subTotalBeforeTax_not?: number | null
  subTotalBeforeTax_in?: number[]
  subTotalBeforeTax_not_in?: number[]
  subTotalBeforeTax_lt?: number | null
  subTotalBeforeTax_lte?: number | null
  subTotalBeforeTax_gt?: number | null
  subTotalBeforeTax_gte?: number | null
  subTotal?: number | null
  subTotal_not?: number | null
  subTotal_in?: number[]
  subTotal_not_in?: number[]
  subTotal_lt?: number | null
  subTotal_lte?: number | null
  subTotal_gt?: number | null
  subTotal_gte?: number | null
  payment?: PaymentWhereInput | null
  state?: prisma.OrderState | null
  state_not?: prisma.OrderState | null
  state_in?: prisma.OrderState[]
  state_not_in?: prisma.OrderState[]
  AND?: OrderWhereInput[]
  OR?: OrderWhereInput[]
  NOT?: OrderWhereInput[]
}
export type OrderWhereInputInputObject =
  | Extract<keyof OrderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'items_every', alias?: string  } 
  | { name: 'items_some', alias?: string  } 
  | { name: 'items_none', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotalBeforeTax_not', alias?: string  } 
  | { name: 'subTotalBeforeTax_in', alias?: string  } 
  | { name: 'subTotalBeforeTax_not_in', alias?: string  } 
  | { name: 'subTotalBeforeTax_lt', alias?: string  } 
  | { name: 'subTotalBeforeTax_lte', alias?: string  } 
  | { name: 'subTotalBeforeTax_gt', alias?: string  } 
  | { name: 'subTotalBeforeTax_gte', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'subTotal_not', alias?: string  } 
  | { name: 'subTotal_in', alias?: string  } 
  | { name: 'subTotal_not_in', alias?: string  } 
  | { name: 'subTotal_lt', alias?: string  } 
  | { name: 'subTotal_lte', alias?: string  } 
  | { name: 'subTotal_gt', alias?: string  } 
  | { name: 'subTotal_gte', alias?: string  } 
  | { name: 'payment', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PaymentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  method?: prisma.PaymentMethod | null
  method_not?: prisma.PaymentMethod | null
  method_in?: prisma.PaymentMethod[]
  method_not_in?: prisma.PaymentMethod[]
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  state?: prisma.PaymentState | null
  state_not?: prisma.PaymentState | null
  state_in?: prisma.PaymentState[]
  state_not_in?: prisma.PaymentState[]
  order?: OrderWhereInput | null
  currencyCode?: prisma.CurrencyCode | null
  currencyCode_not?: prisma.CurrencyCode | null
  currencyCode_in?: prisma.CurrencyCode[]
  currencyCode_not_in?: prisma.CurrencyCode[]
  AND?: PaymentWhereInput[]
  OR?: PaymentWhereInput[]
  NOT?: PaymentWhereInput[]
}
export type PaymentWhereInputInputObject =
  | Extract<keyof PaymentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'method', alias?: string  } 
  | { name: 'method_not', alias?: string  } 
  | { name: 'method_in', alias?: string  } 
  | { name: 'method_not_in', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'currencyCode', alias?: string  } 
  | { name: 'currencyCode_not', alias?: string  } 
  | { name: 'currencyCode_in', alias?: string  } 
  | { name: 'currencyCode_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderOptionValuesWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  optionName?: string | null
  optionName_not?: string | null
  optionName_in?: string[]
  optionName_not_in?: string[]
  optionName_lt?: string | null
  optionName_lte?: string | null
  optionName_gt?: string | null
  optionName_gte?: string | null
  optionName_contains?: string | null
  optionName_not_contains?: string | null
  optionName_starts_with?: string | null
  optionName_not_starts_with?: string | null
  optionName_ends_with?: string | null
  optionName_not_ends_with?: string | null
  optionValue?: string | null
  optionValue_not?: string | null
  optionValue_in?: string[]
  optionValue_not_in?: string[]
  optionValue_lt?: string | null
  optionValue_lte?: string | null
  optionValue_gt?: string | null
  optionValue_gte?: string | null
  optionValue_contains?: string | null
  optionValue_not_contains?: string | null
  optionValue_starts_with?: string | null
  optionValue_not_starts_with?: string | null
  optionValue_ends_with?: string | null
  optionValue_not_ends_with?: string | null
  AND?: OrderOptionValuesWhereInput[]
  OR?: OrderOptionValuesWhereInput[]
  NOT?: OrderOptionValuesWhereInput[]
}
export type OrderOptionValuesWhereInputInputObject =
  | Extract<keyof OrderOptionValuesWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'optionName', alias?: string  } 
  | { name: 'optionName_not', alias?: string  } 
  | { name: 'optionName_in', alias?: string  } 
  | { name: 'optionName_not_in', alias?: string  } 
  | { name: 'optionName_lt', alias?: string  } 
  | { name: 'optionName_lte', alias?: string  } 
  | { name: 'optionName_gt', alias?: string  } 
  | { name: 'optionName_gte', alias?: string  } 
  | { name: 'optionName_contains', alias?: string  } 
  | { name: 'optionName_not_contains', alias?: string  } 
  | { name: 'optionName_starts_with', alias?: string  } 
  | { name: 'optionName_not_starts_with', alias?: string  } 
  | { name: 'optionName_ends_with', alias?: string  } 
  | { name: 'optionName_not_ends_with', alias?: string  } 
  | { name: 'optionValue', alias?: string  } 
  | { name: 'optionValue_not', alias?: string  } 
  | { name: 'optionValue_in', alias?: string  } 
  | { name: 'optionValue_not_in', alias?: string  } 
  | { name: 'optionValue_lt', alias?: string  } 
  | { name: 'optionValue_lte', alias?: string  } 
  | { name: 'optionValue_gt', alias?: string  } 
  | { name: 'optionValue_gte', alias?: string  } 
  | { name: 'optionValue_contains', alias?: string  } 
  | { name: 'optionValue_not_contains', alias?: string  } 
  | { name: 'optionValue_starts_with', alias?: string  } 
  | { name: 'optionValue_not_starts_with', alias?: string  } 
  | { name: 'optionValue_ends_with', alias?: string  } 
  | { name: 'optionValue_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderLineItemWhereUniqueInput {
  id?: string | null
}
export type OrderLineItemWhereUniqueInputInputObject =
  | Extract<keyof OrderLineItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OrderOptionValuesWhereUniqueInput {
  id?: string | null
}
export type OrderOptionValuesWhereUniqueInputInputObject =
  | Extract<keyof OrderOptionValuesWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PaymentWhereUniqueInput {
  id?: string | null
}
export type PaymentWhereUniqueInputInputObject =
  | Extract<keyof PaymentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CollectionCreateInput {
  name?: string
  rules?: CollectionRuleSetCreateOneInput | null
  products?: ProductCreateManyWithoutCollectionsInput | null
}
export type CollectionCreateInputInputObject =
  | Extract<keyof CollectionCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface CollectionRuleSetCreateOneInput {
  create?: CollectionRuleSetCreateInput | null
  connect?: CollectionRuleSetWhereUniqueInput | null
}
export type CollectionRuleSetCreateOneInputInputObject =
  | Extract<keyof CollectionRuleSetCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CollectionRuleSetCreateInput {
  rules?: CollectionRuleCreateManyInput | null
  appliesDisjunctively?: boolean
}
export type CollectionRuleSetCreateInputInputObject =
  | Extract<keyof CollectionRuleSetCreateInput, string>
  | { name: 'rules', alias?: string  } 
  | { name: 'appliesDisjunctively', alias?: string  } 
  
export interface CollectionRuleCreateManyInput {
  create?: CollectionRuleCreateInput[]
  connect?: CollectionRuleWhereUniqueInput[]
}
export type CollectionRuleCreateManyInputInputObject =
  | Extract<keyof CollectionRuleCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CollectionRuleCreateInput {
  field?: prisma.CollectionRuleField
  relation?: prisma.CollectionRuleRelation
  value?: string
}
export type CollectionRuleCreateInputInputObject =
  | Extract<keyof CollectionRuleCreateInput, string>
  | { name: 'field', alias?: string  } 
  | { name: 'relation', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface ProductCreateManyWithoutCollectionsInput {
  create?: ProductCreateWithoutCollectionsInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutCollectionsInputInputObject =
  | Extract<keyof ProductCreateManyWithoutCollectionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutCollectionsInput {
  slug?: string
  name?: string
  brand?: BrandCreateOneWithoutProductsInput
  description?: string
  type?: ProductTypeCreateOneInput | null
  thumbnail?: ImageCreateOneInput
  variants?: VariantCreateManyInput | null
  attributes?: AttributeCreateManyWithoutProductsInput | null
}
export type ProductCreateWithoutCollectionsInputInputObject =
  | Extract<keyof ProductCreateWithoutCollectionsInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'attributes', alias?: string  } 
  
export interface BrandCreateOneWithoutProductsInput {
  create?: BrandCreateWithoutProductsInput | null
  connect?: BrandWhereUniqueInput | null
}
export type BrandCreateOneWithoutProductsInputInputObject =
  | Extract<keyof BrandCreateOneWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BrandCreateWithoutProductsInput {
  name?: string
}
export type BrandCreateWithoutProductsInputInputObject =
  | Extract<keyof BrandCreateWithoutProductsInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProductTypeCreateOneInput {
  create?: ProductTypeCreateInput | null
  connect?: ProductTypeWhereUniqueInput | null
}
export type ProductTypeCreateOneInputInputObject =
  | Extract<keyof ProductTypeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductTypeCreateInput {
  name?: string
}
export type ProductTypeCreateInputInputObject =
  | Extract<keyof ProductTypeCreateInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ImageCreateOneInput {
  create?: ImageCreateInput | null
  connect?: ImageWhereUniqueInput | null
}
export type ImageCreateOneInputInputObject =
  | Extract<keyof ImageCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ImageCreateInput {
  url?: string
}
export type ImageCreateInputInputObject =
  | Extract<keyof ImageCreateInput, string>
  | { name: 'url', alias?: string  } 
  
export interface VariantCreateManyInput {
  create?: VariantCreateInput[]
  connect?: VariantWhereUniqueInput[]
}
export type VariantCreateManyInputInputObject =
  | Extract<keyof VariantCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VariantCreateInput {
  optionValues?: OptionValueCreateManyInput | null
  price?: number
  availableForSale?: boolean | null
  sku?: string | null
  images?: ImageCreateManyInput | null
}
export type VariantCreateInputInputObject =
  | Extract<keyof VariantCreateInput, string>
  | { name: 'optionValues', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'availableForSale', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface OptionValueCreateManyInput {
  create?: OptionValueCreateInput[]
  connect?: OptionValueWhereUniqueInput[]
}
export type OptionValueCreateManyInputInputObject =
  | Extract<keyof OptionValueCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OptionValueCreateInput {
  name?: string
  option?: OptionCreateOneWithoutValuesInput
}
export type OptionValueCreateInputInputObject =
  | Extract<keyof OptionValueCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'option', alias?: string  } 
  
export interface OptionCreateOneWithoutValuesInput {
  create?: OptionCreateWithoutValuesInput | null
  connect?: OptionWhereUniqueInput | null
}
export type OptionCreateOneWithoutValuesInputInputObject =
  | Extract<keyof OptionCreateOneWithoutValuesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OptionCreateWithoutValuesInput {
  name?: string
  isColor?: boolean
}
export type OptionCreateWithoutValuesInputInputObject =
  | Extract<keyof OptionCreateWithoutValuesInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isColor', alias?: string  } 
  
export interface ImageCreateManyInput {
  create?: ImageCreateInput[]
  connect?: ImageWhereUniqueInput[]
}
export type ImageCreateManyInputInputObject =
  | Extract<keyof ImageCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AttributeCreateManyWithoutProductsInput {
  create?: AttributeCreateWithoutProductsInput[]
  connect?: AttributeWhereUniqueInput[]
}
export type AttributeCreateManyWithoutProductsInputInputObject =
  | Extract<keyof AttributeCreateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AttributeCreateWithoutProductsInput {
  key?: string
  value?: string
}
export type AttributeCreateWithoutProductsInputInputObject =
  | Extract<keyof AttributeCreateWithoutProductsInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface CollectionUpdateInput {
  name?: string | null
  rules?: CollectionRuleSetUpdateOneInput | null
  products?: ProductUpdateManyWithoutCollectionsInput | null
}
export type CollectionUpdateInputInputObject =
  | Extract<keyof CollectionUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface CollectionRuleSetUpdateOneInput {
  create?: CollectionRuleSetCreateInput | null
  update?: CollectionRuleSetUpdateDataInput | null
  upsert?: CollectionRuleSetUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CollectionRuleSetWhereUniqueInput | null
}
export type CollectionRuleSetUpdateOneInputInputObject =
  | Extract<keyof CollectionRuleSetUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CollectionRuleSetUpdateDataInput {
  rules?: CollectionRuleUpdateManyInput | null
  appliesDisjunctively?: boolean | null
}
export type CollectionRuleSetUpdateDataInputInputObject =
  | Extract<keyof CollectionRuleSetUpdateDataInput, string>
  | { name: 'rules', alias?: string  } 
  | { name: 'appliesDisjunctively', alias?: string  } 
  
export interface CollectionRuleUpdateManyInput {
  create?: CollectionRuleCreateInput[]
  update?: CollectionRuleUpdateWithWhereUniqueNestedInput[]
  upsert?: CollectionRuleUpsertWithWhereUniqueNestedInput[]
  delete?: CollectionRuleWhereUniqueInput[]
  connect?: CollectionRuleWhereUniqueInput[]
  set?: CollectionRuleWhereUniqueInput[]
  disconnect?: CollectionRuleWhereUniqueInput[]
  deleteMany?: CollectionRuleScalarWhereInput[]
  updateMany?: CollectionRuleUpdateManyWithWhereNestedInput[]
}
export type CollectionRuleUpdateManyInputInputObject =
  | Extract<keyof CollectionRuleUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CollectionRuleUpdateWithWhereUniqueNestedInput {
  where?: CollectionRuleWhereUniqueInput
  data?: CollectionRuleUpdateDataInput
}
export type CollectionRuleUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof CollectionRuleUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CollectionRuleUpdateDataInput {
  field?: prisma.CollectionRuleField | null
  relation?: prisma.CollectionRuleRelation | null
  value?: string | null
}
export type CollectionRuleUpdateDataInputInputObject =
  | Extract<keyof CollectionRuleUpdateDataInput, string>
  | { name: 'field', alias?: string  } 
  | { name: 'relation', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface CollectionRuleUpsertWithWhereUniqueNestedInput {
  where?: CollectionRuleWhereUniqueInput
  update?: CollectionRuleUpdateDataInput
  create?: CollectionRuleCreateInput
}
export type CollectionRuleUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof CollectionRuleUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CollectionRuleScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  field?: prisma.CollectionRuleField | null
  field_not?: prisma.CollectionRuleField | null
  field_in?: prisma.CollectionRuleField[]
  field_not_in?: prisma.CollectionRuleField[]
  relation?: prisma.CollectionRuleRelation | null
  relation_not?: prisma.CollectionRuleRelation | null
  relation_in?: prisma.CollectionRuleRelation[]
  relation_not_in?: prisma.CollectionRuleRelation[]
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  AND?: CollectionRuleScalarWhereInput[]
  OR?: CollectionRuleScalarWhereInput[]
  NOT?: CollectionRuleScalarWhereInput[]
}
export type CollectionRuleScalarWhereInputInputObject =
  | Extract<keyof CollectionRuleScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'field', alias?: string  } 
  | { name: 'field_not', alias?: string  } 
  | { name: 'field_in', alias?: string  } 
  | { name: 'field_not_in', alias?: string  } 
  | { name: 'relation', alias?: string  } 
  | { name: 'relation_not', alias?: string  } 
  | { name: 'relation_in', alias?: string  } 
  | { name: 'relation_not_in', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionRuleUpdateManyWithWhereNestedInput {
  where?: CollectionRuleScalarWhereInput
  data?: CollectionRuleUpdateManyDataInput
}
export type CollectionRuleUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CollectionRuleUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CollectionRuleUpdateManyDataInput {
  field?: prisma.CollectionRuleField | null
  relation?: prisma.CollectionRuleRelation | null
  value?: string | null
}
export type CollectionRuleUpdateManyDataInputInputObject =
  | Extract<keyof CollectionRuleUpdateManyDataInput, string>
  | { name: 'field', alias?: string  } 
  | { name: 'relation', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface CollectionRuleSetUpsertNestedInput {
  update?: CollectionRuleSetUpdateDataInput
  create?: CollectionRuleSetCreateInput
}
export type CollectionRuleSetUpsertNestedInputInputObject =
  | Extract<keyof CollectionRuleSetUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductUpdateManyWithoutCollectionsInput {
  create?: ProductCreateWithoutCollectionsInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutCollectionsInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutCollectionsInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutCollectionsInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutCollectionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutCollectionsInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutCollectionsDataInput
}
export type ProductUpdateWithWhereUniqueWithoutCollectionsInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutCollectionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutCollectionsDataInput {
  slug?: string | null
  name?: string | null
  brand?: BrandUpdateOneRequiredWithoutProductsInput | null
  description?: string | null
  type?: ProductTypeUpdateOneInput | null
  thumbnail?: ImageUpdateOneRequiredInput | null
  variants?: VariantUpdateManyInput | null
  attributes?: AttributeUpdateManyWithoutProductsInput | null
}
export type ProductUpdateWithoutCollectionsDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutCollectionsDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'attributes', alias?: string  } 
  
export interface BrandUpdateOneRequiredWithoutProductsInput {
  create?: BrandCreateWithoutProductsInput | null
  update?: BrandUpdateWithoutProductsDataInput | null
  upsert?: BrandUpsertWithoutProductsInput | null
  connect?: BrandWhereUniqueInput | null
}
export type BrandUpdateOneRequiredWithoutProductsInputInputObject =
  | Extract<keyof BrandUpdateOneRequiredWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BrandUpdateWithoutProductsDataInput {
  name?: string | null
}
export type BrandUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof BrandUpdateWithoutProductsDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface BrandUpsertWithoutProductsInput {
  update?: BrandUpdateWithoutProductsDataInput
  create?: BrandCreateWithoutProductsInput
}
export type BrandUpsertWithoutProductsInputInputObject =
  | Extract<keyof BrandUpsertWithoutProductsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductTypeUpdateOneInput {
  create?: ProductTypeCreateInput | null
  update?: ProductTypeUpdateDataInput | null
  upsert?: ProductTypeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProductTypeWhereUniqueInput | null
}
export type ProductTypeUpdateOneInputInputObject =
  | Extract<keyof ProductTypeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductTypeUpdateDataInput {
  name?: string | null
}
export type ProductTypeUpdateDataInputInputObject =
  | Extract<keyof ProductTypeUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProductTypeUpsertNestedInput {
  update?: ProductTypeUpdateDataInput
  create?: ProductTypeCreateInput
}
export type ProductTypeUpsertNestedInputInputObject =
  | Extract<keyof ProductTypeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ImageUpdateOneRequiredInput {
  create?: ImageCreateInput | null
  update?: ImageUpdateDataInput | null
  upsert?: ImageUpsertNestedInput | null
  connect?: ImageWhereUniqueInput | null
}
export type ImageUpdateOneRequiredInputInputObject =
  | Extract<keyof ImageUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ImageUpdateDataInput {
  url?: string | null
}
export type ImageUpdateDataInputInputObject =
  | Extract<keyof ImageUpdateDataInput, string>
  | { name: 'url', alias?: string  } 
  
export interface ImageUpsertNestedInput {
  update?: ImageUpdateDataInput
  create?: ImageCreateInput
}
export type ImageUpsertNestedInputInputObject =
  | Extract<keyof ImageUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VariantUpdateManyInput {
  create?: VariantCreateInput[]
  update?: VariantUpdateWithWhereUniqueNestedInput[]
  upsert?: VariantUpsertWithWhereUniqueNestedInput[]
  delete?: VariantWhereUniqueInput[]
  connect?: VariantWhereUniqueInput[]
  set?: VariantWhereUniqueInput[]
  disconnect?: VariantWhereUniqueInput[]
  deleteMany?: VariantScalarWhereInput[]
  updateMany?: VariantUpdateManyWithWhereNestedInput[]
}
export type VariantUpdateManyInputInputObject =
  | Extract<keyof VariantUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface VariantUpdateWithWhereUniqueNestedInput {
  where?: VariantWhereUniqueInput
  data?: VariantUpdateDataInput
}
export type VariantUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof VariantUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface VariantUpdateDataInput {
  optionValues?: OptionValueUpdateManyInput | null
  price?: number | null
  availableForSale?: boolean | null
  sku?: string | null
  images?: ImageUpdateManyInput | null
}
export type VariantUpdateDataInputInputObject =
  | Extract<keyof VariantUpdateDataInput, string>
  | { name: 'optionValues', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'availableForSale', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface OptionValueUpdateManyInput {
  create?: OptionValueCreateInput[]
  update?: OptionValueUpdateWithWhereUniqueNestedInput[]
  upsert?: OptionValueUpsertWithWhereUniqueNestedInput[]
  delete?: OptionValueWhereUniqueInput[]
  connect?: OptionValueWhereUniqueInput[]
  set?: OptionValueWhereUniqueInput[]
  disconnect?: OptionValueWhereUniqueInput[]
  deleteMany?: OptionValueScalarWhereInput[]
  updateMany?: OptionValueUpdateManyWithWhereNestedInput[]
}
export type OptionValueUpdateManyInputInputObject =
  | Extract<keyof OptionValueUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OptionValueUpdateWithWhereUniqueNestedInput {
  where?: OptionValueWhereUniqueInput
  data?: OptionValueUpdateDataInput
}
export type OptionValueUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof OptionValueUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OptionValueUpdateDataInput {
  name?: string | null
  option?: OptionUpdateOneRequiredWithoutValuesInput | null
}
export type OptionValueUpdateDataInputInputObject =
  | Extract<keyof OptionValueUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'option', alias?: string  } 
  
export interface OptionUpdateOneRequiredWithoutValuesInput {
  create?: OptionCreateWithoutValuesInput | null
  update?: OptionUpdateWithoutValuesDataInput | null
  upsert?: OptionUpsertWithoutValuesInput | null
  connect?: OptionWhereUniqueInput | null
}
export type OptionUpdateOneRequiredWithoutValuesInputInputObject =
  | Extract<keyof OptionUpdateOneRequiredWithoutValuesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OptionUpdateWithoutValuesDataInput {
  name?: string | null
  isColor?: boolean | null
}
export type OptionUpdateWithoutValuesDataInputInputObject =
  | Extract<keyof OptionUpdateWithoutValuesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isColor', alias?: string  } 
  
export interface OptionUpsertWithoutValuesInput {
  update?: OptionUpdateWithoutValuesDataInput
  create?: OptionCreateWithoutValuesInput
}
export type OptionUpsertWithoutValuesInputInputObject =
  | Extract<keyof OptionUpsertWithoutValuesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OptionValueUpsertWithWhereUniqueNestedInput {
  where?: OptionValueWhereUniqueInput
  update?: OptionValueUpdateDataInput
  create?: OptionValueCreateInput
}
export type OptionValueUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof OptionValueUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OptionValueScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: OptionValueScalarWhereInput[]
  OR?: OptionValueScalarWhereInput[]
  NOT?: OptionValueScalarWhereInput[]
}
export type OptionValueScalarWhereInputInputObject =
  | Extract<keyof OptionValueScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OptionValueUpdateManyWithWhereNestedInput {
  where?: OptionValueScalarWhereInput
  data?: OptionValueUpdateManyDataInput
}
export type OptionValueUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof OptionValueUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OptionValueUpdateManyDataInput {
  name?: string | null
}
export type OptionValueUpdateManyDataInputInputObject =
  | Extract<keyof OptionValueUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ImageUpdateManyInput {
  create?: ImageCreateInput[]
  update?: ImageUpdateWithWhereUniqueNestedInput[]
  upsert?: ImageUpsertWithWhereUniqueNestedInput[]
  delete?: ImageWhereUniqueInput[]
  connect?: ImageWhereUniqueInput[]
  set?: ImageWhereUniqueInput[]
  disconnect?: ImageWhereUniqueInput[]
  deleteMany?: ImageScalarWhereInput[]
  updateMany?: ImageUpdateManyWithWhereNestedInput[]
}
export type ImageUpdateManyInputInputObject =
  | Extract<keyof ImageUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ImageUpdateWithWhereUniqueNestedInput {
  where?: ImageWhereUniqueInput
  data?: ImageUpdateDataInput
}
export type ImageUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ImageUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ImageUpsertWithWhereUniqueNestedInput {
  where?: ImageWhereUniqueInput
  update?: ImageUpdateDataInput
  create?: ImageCreateInput
}
export type ImageUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ImageUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ImageScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  AND?: ImageScalarWhereInput[]
  OR?: ImageScalarWhereInput[]
  NOT?: ImageScalarWhereInput[]
}
export type ImageScalarWhereInputInputObject =
  | Extract<keyof ImageScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ImageUpdateManyWithWhereNestedInput {
  where?: ImageScalarWhereInput
  data?: ImageUpdateManyDataInput
}
export type ImageUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ImageUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ImageUpdateManyDataInput {
  url?: string | null
}
export type ImageUpdateManyDataInputInputObject =
  | Extract<keyof ImageUpdateManyDataInput, string>
  | { name: 'url', alias?: string  } 
  
export interface VariantUpsertWithWhereUniqueNestedInput {
  where?: VariantWhereUniqueInput
  update?: VariantUpdateDataInput
  create?: VariantCreateInput
}
export type VariantUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof VariantUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VariantScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  availableForSale?: boolean | null
  availableForSale_not?: boolean | null
  sku?: string | null
  sku_not?: string | null
  sku_in?: string[]
  sku_not_in?: string[]
  sku_lt?: string | null
  sku_lte?: string | null
  sku_gt?: string | null
  sku_gte?: string | null
  sku_contains?: string | null
  sku_not_contains?: string | null
  sku_starts_with?: string | null
  sku_not_starts_with?: string | null
  sku_ends_with?: string | null
  sku_not_ends_with?: string | null
  AND?: VariantScalarWhereInput[]
  OR?: VariantScalarWhereInput[]
  NOT?: VariantScalarWhereInput[]
}
export type VariantScalarWhereInputInputObject =
  | Extract<keyof VariantScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'availableForSale', alias?: string  } 
  | { name: 'availableForSale_not', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'sku_not', alias?: string  } 
  | { name: 'sku_in', alias?: string  } 
  | { name: 'sku_not_in', alias?: string  } 
  | { name: 'sku_lt', alias?: string  } 
  | { name: 'sku_lte', alias?: string  } 
  | { name: 'sku_gt', alias?: string  } 
  | { name: 'sku_gte', alias?: string  } 
  | { name: 'sku_contains', alias?: string  } 
  | { name: 'sku_not_contains', alias?: string  } 
  | { name: 'sku_starts_with', alias?: string  } 
  | { name: 'sku_not_starts_with', alias?: string  } 
  | { name: 'sku_ends_with', alias?: string  } 
  | { name: 'sku_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VariantUpdateManyWithWhereNestedInput {
  where?: VariantScalarWhereInput
  data?: VariantUpdateManyDataInput
}
export type VariantUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof VariantUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface VariantUpdateManyDataInput {
  price?: number | null
  availableForSale?: boolean | null
  sku?: string | null
}
export type VariantUpdateManyDataInputInputObject =
  | Extract<keyof VariantUpdateManyDataInput, string>
  | { name: 'price', alias?: string  } 
  | { name: 'availableForSale', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface AttributeUpdateManyWithoutProductsInput {
  create?: AttributeCreateWithoutProductsInput[]
  delete?: AttributeWhereUniqueInput[]
  connect?: AttributeWhereUniqueInput[]
  set?: AttributeWhereUniqueInput[]
  disconnect?: AttributeWhereUniqueInput[]
  update?: AttributeUpdateWithWhereUniqueWithoutProductsInput[]
  upsert?: AttributeUpsertWithWhereUniqueWithoutProductsInput[]
  deleteMany?: AttributeScalarWhereInput[]
  updateMany?: AttributeUpdateManyWithWhereNestedInput[]
}
export type AttributeUpdateManyWithoutProductsInputInputObject =
  | Extract<keyof AttributeUpdateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AttributeUpdateWithWhereUniqueWithoutProductsInput {
  where?: AttributeWhereUniqueInput
  data?: AttributeUpdateWithoutProductsDataInput
}
export type AttributeUpdateWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof AttributeUpdateWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttributeUpdateWithoutProductsDataInput {
  key?: string | null
  value?: string | null
}
export type AttributeUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof AttributeUpdateWithoutProductsDataInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface AttributeUpsertWithWhereUniqueWithoutProductsInput {
  where?: AttributeWhereUniqueInput
  update?: AttributeUpdateWithoutProductsDataInput
  create?: AttributeCreateWithoutProductsInput
}
export type AttributeUpsertWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof AttributeUpsertWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AttributeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  key?: string | null
  key_not?: string | null
  key_in?: string[]
  key_not_in?: string[]
  key_lt?: string | null
  key_lte?: string | null
  key_gt?: string | null
  key_gte?: string | null
  key_contains?: string | null
  key_not_contains?: string | null
  key_starts_with?: string | null
  key_not_starts_with?: string | null
  key_ends_with?: string | null
  key_not_ends_with?: string | null
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  AND?: AttributeScalarWhereInput[]
  OR?: AttributeScalarWhereInput[]
  NOT?: AttributeScalarWhereInput[]
}
export type AttributeScalarWhereInputInputObject =
  | Extract<keyof AttributeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'key_not', alias?: string  } 
  | { name: 'key_in', alias?: string  } 
  | { name: 'key_not_in', alias?: string  } 
  | { name: 'key_lt', alias?: string  } 
  | { name: 'key_lte', alias?: string  } 
  | { name: 'key_gt', alias?: string  } 
  | { name: 'key_gte', alias?: string  } 
  | { name: 'key_contains', alias?: string  } 
  | { name: 'key_not_contains', alias?: string  } 
  | { name: 'key_starts_with', alias?: string  } 
  | { name: 'key_not_starts_with', alias?: string  } 
  | { name: 'key_ends_with', alias?: string  } 
  | { name: 'key_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttributeUpdateManyWithWhereNestedInput {
  where?: AttributeScalarWhereInput
  data?: AttributeUpdateManyDataInput
}
export type AttributeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AttributeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttributeUpdateManyDataInput {
  key?: string | null
  value?: string | null
}
export type AttributeUpdateManyDataInputInputObject =
  | Extract<keyof AttributeUpdateManyDataInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutCollectionsInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutCollectionsDataInput
  create?: ProductCreateWithoutCollectionsInput
}
export type ProductUpsertWithWhereUniqueWithoutCollectionsInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutCollectionsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProductScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  slug?: string | null
  slug_not?: string | null
  slug_in?: string[]
  slug_not_in?: string[]
  slug_lt?: string | null
  slug_lte?: string | null
  slug_gt?: string | null
  slug_gte?: string | null
  slug_contains?: string | null
  slug_not_contains?: string | null
  slug_starts_with?: string | null
  slug_not_starts_with?: string | null
  slug_ends_with?: string | null
  slug_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: ProductScalarWhereInput[]
  OR?: ProductScalarWhereInput[]
  NOT?: ProductScalarWhereInput[]
}
export type ProductScalarWhereInputInputObject =
  | Extract<keyof ProductScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'slug', alias?: string  } 
  | { name: 'slug_not', alias?: string  } 
  | { name: 'slug_in', alias?: string  } 
  | { name: 'slug_not_in', alias?: string  } 
  | { name: 'slug_lt', alias?: string  } 
  | { name: 'slug_lte', alias?: string  } 
  | { name: 'slug_gt', alias?: string  } 
  | { name: 'slug_gte', alias?: string  } 
  | { name: 'slug_contains', alias?: string  } 
  | { name: 'slug_not_contains', alias?: string  } 
  | { name: 'slug_starts_with', alias?: string  } 
  | { name: 'slug_not_starts_with', alias?: string  } 
  | { name: 'slug_ends_with', alias?: string  } 
  | { name: 'slug_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductUpdateManyWithWhereNestedInput {
  where?: ProductScalarWhereInput
  data?: ProductUpdateManyDataInput
}
export type ProductUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProductUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateManyDataInput {
  slug?: string | null
  name?: string | null
  description?: string | null
}
export type ProductUpdateManyDataInputInputObject =
  | Extract<keyof ProductUpdateManyDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface CollectionUpdateManyMutationInput {
  name?: string | null
}
export type CollectionUpdateManyMutationInputInputObject =
  | Extract<keyof CollectionUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface CollectionRuleSetUpdateInput {
  rules?: CollectionRuleUpdateManyInput | null
  appliesDisjunctively?: boolean | null
}
export type CollectionRuleSetUpdateInputInputObject =
  | Extract<keyof CollectionRuleSetUpdateInput, string>
  | { name: 'rules', alias?: string  } 
  | { name: 'appliesDisjunctively', alias?: string  } 
  
export interface CollectionRuleSetUpdateManyMutationInput {
  appliesDisjunctively?: boolean | null
}
export type CollectionRuleSetUpdateManyMutationInputInputObject =
  | Extract<keyof CollectionRuleSetUpdateManyMutationInput, string>
  | { name: 'appliesDisjunctively', alias?: string  } 
  
export interface CollectionRuleUpdateInput {
  field?: prisma.CollectionRuleField | null
  relation?: prisma.CollectionRuleRelation | null
  value?: string | null
}
export type CollectionRuleUpdateInputInputObject =
  | Extract<keyof CollectionRuleUpdateInput, string>
  | { name: 'field', alias?: string  } 
  | { name: 'relation', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface CollectionRuleUpdateManyMutationInput {
  field?: prisma.CollectionRuleField | null
  relation?: prisma.CollectionRuleRelation | null
  value?: string | null
}
export type CollectionRuleUpdateManyMutationInputInputObject =
  | Extract<keyof CollectionRuleUpdateManyMutationInput, string>
  | { name: 'field', alias?: string  } 
  | { name: 'relation', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface ProductTypeUpdateInput {
  name?: string | null
}
export type ProductTypeUpdateInputInputObject =
  | Extract<keyof ProductTypeUpdateInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProductTypeUpdateManyMutationInput {
  name?: string | null
}
export type ProductTypeUpdateManyMutationInputInputObject =
  | Extract<keyof ProductTypeUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProductCreateInput {
  slug?: string
  name?: string
  brand?: BrandCreateOneWithoutProductsInput
  description?: string
  type?: ProductTypeCreateOneInput | null
  thumbnail?: ImageCreateOneInput
  variants?: VariantCreateManyInput | null
  collections?: CollectionCreateManyWithoutProductsInput | null
  attributes?: AttributeCreateManyWithoutProductsInput | null
}
export type ProductCreateInputInputObject =
  | Extract<keyof ProductCreateInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'collections', alias?: string  } 
  | { name: 'attributes', alias?: string  } 
  
export interface CollectionCreateManyWithoutProductsInput {
  create?: CollectionCreateWithoutProductsInput[]
  connect?: CollectionWhereUniqueInput[]
}
export type CollectionCreateManyWithoutProductsInputInputObject =
  | Extract<keyof CollectionCreateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CollectionCreateWithoutProductsInput {
  name?: string
  rules?: CollectionRuleSetCreateOneInput | null
}
export type CollectionCreateWithoutProductsInputInputObject =
  | Extract<keyof CollectionCreateWithoutProductsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  
export interface ProductUpdateInput {
  slug?: string | null
  name?: string | null
  brand?: BrandUpdateOneRequiredWithoutProductsInput | null
  description?: string | null
  type?: ProductTypeUpdateOneInput | null
  thumbnail?: ImageUpdateOneRequiredInput | null
  variants?: VariantUpdateManyInput | null
  collections?: CollectionUpdateManyWithoutProductsInput | null
  attributes?: AttributeUpdateManyWithoutProductsInput | null
}
export type ProductUpdateInputInputObject =
  | Extract<keyof ProductUpdateInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'collections', alias?: string  } 
  | { name: 'attributes', alias?: string  } 
  
export interface CollectionUpdateManyWithoutProductsInput {
  create?: CollectionCreateWithoutProductsInput[]
  delete?: CollectionWhereUniqueInput[]
  connect?: CollectionWhereUniqueInput[]
  set?: CollectionWhereUniqueInput[]
  disconnect?: CollectionWhereUniqueInput[]
  update?: CollectionUpdateWithWhereUniqueWithoutProductsInput[]
  upsert?: CollectionUpsertWithWhereUniqueWithoutProductsInput[]
  deleteMany?: CollectionScalarWhereInput[]
  updateMany?: CollectionUpdateManyWithWhereNestedInput[]
}
export type CollectionUpdateManyWithoutProductsInputInputObject =
  | Extract<keyof CollectionUpdateManyWithoutProductsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CollectionUpdateWithWhereUniqueWithoutProductsInput {
  where?: CollectionWhereUniqueInput
  data?: CollectionUpdateWithoutProductsDataInput
}
export type CollectionUpdateWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof CollectionUpdateWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CollectionUpdateWithoutProductsDataInput {
  name?: string | null
  rules?: CollectionRuleSetUpdateOneInput | null
}
export type CollectionUpdateWithoutProductsDataInputInputObject =
  | Extract<keyof CollectionUpdateWithoutProductsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  
export interface CollectionUpsertWithWhereUniqueWithoutProductsInput {
  where?: CollectionWhereUniqueInput
  update?: CollectionUpdateWithoutProductsDataInput
  create?: CollectionCreateWithoutProductsInput
}
export type CollectionUpsertWithWhereUniqueWithoutProductsInputInputObject =
  | Extract<keyof CollectionUpsertWithWhereUniqueWithoutProductsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CollectionScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: CollectionScalarWhereInput[]
  OR?: CollectionScalarWhereInput[]
  NOT?: CollectionScalarWhereInput[]
}
export type CollectionScalarWhereInputInputObject =
  | Extract<keyof CollectionScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionUpdateManyWithWhereNestedInput {
  where?: CollectionScalarWhereInput
  data?: CollectionUpdateManyDataInput
}
export type CollectionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CollectionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CollectionUpdateManyDataInput {
  name?: string | null
}
export type CollectionUpdateManyDataInputInputObject =
  | Extract<keyof CollectionUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface ProductUpdateManyMutationInput {
  slug?: string | null
  name?: string | null
  description?: string | null
}
export type ProductUpdateManyMutationInputInputObject =
  | Extract<keyof ProductUpdateManyMutationInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface BrandCreateInput {
  name?: string
  products?: ProductCreateManyWithoutBrandInput | null
}
export type BrandCreateInputInputObject =
  | Extract<keyof BrandCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductCreateManyWithoutBrandInput {
  create?: ProductCreateWithoutBrandInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutBrandInputInputObject =
  | Extract<keyof ProductCreateManyWithoutBrandInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutBrandInput {
  slug?: string
  name?: string
  description?: string
  type?: ProductTypeCreateOneInput | null
  thumbnail?: ImageCreateOneInput
  variants?: VariantCreateManyInput | null
  collections?: CollectionCreateManyWithoutProductsInput | null
  attributes?: AttributeCreateManyWithoutProductsInput | null
}
export type ProductCreateWithoutBrandInputInputObject =
  | Extract<keyof ProductCreateWithoutBrandInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'collections', alias?: string  } 
  | { name: 'attributes', alias?: string  } 
  
export interface BrandUpdateInput {
  name?: string | null
  products?: ProductUpdateManyWithoutBrandInput | null
}
export type BrandUpdateInputInputObject =
  | Extract<keyof BrandUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductUpdateManyWithoutBrandInput {
  create?: ProductCreateWithoutBrandInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutBrandInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutBrandInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutBrandInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutBrandInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutBrandDataInput
}
export type ProductUpdateWithWhereUniqueWithoutBrandInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutBrandInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutBrandDataInput {
  slug?: string | null
  name?: string | null
  description?: string | null
  type?: ProductTypeUpdateOneInput | null
  thumbnail?: ImageUpdateOneRequiredInput | null
  variants?: VariantUpdateManyInput | null
  collections?: CollectionUpdateManyWithoutProductsInput | null
  attributes?: AttributeUpdateManyWithoutProductsInput | null
}
export type ProductUpdateWithoutBrandDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutBrandDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'collections', alias?: string  } 
  | { name: 'attributes', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutBrandInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutBrandDataInput
  create?: ProductCreateWithoutBrandInput
}
export type ProductUpsertWithWhereUniqueWithoutBrandInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutBrandInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BrandUpdateManyMutationInput {
  name?: string | null
}
export type BrandUpdateManyMutationInputInputObject =
  | Extract<keyof BrandUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface AttributeCreateInput {
  key?: string
  value?: string
  products?: ProductCreateManyWithoutAttributesInput | null
}
export type AttributeCreateInputInputObject =
  | Extract<keyof AttributeCreateInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductCreateManyWithoutAttributesInput {
  create?: ProductCreateWithoutAttributesInput[]
  connect?: ProductWhereUniqueInput[]
}
export type ProductCreateManyWithoutAttributesInputInputObject =
  | Extract<keyof ProductCreateManyWithoutAttributesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProductCreateWithoutAttributesInput {
  slug?: string
  name?: string
  brand?: BrandCreateOneWithoutProductsInput
  description?: string
  type?: ProductTypeCreateOneInput | null
  thumbnail?: ImageCreateOneInput
  variants?: VariantCreateManyInput | null
  collections?: CollectionCreateManyWithoutProductsInput | null
}
export type ProductCreateWithoutAttributesInputInputObject =
  | Extract<keyof ProductCreateWithoutAttributesInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'collections', alias?: string  } 
  
export interface AttributeUpdateInput {
  key?: string | null
  value?: string | null
  products?: ProductUpdateManyWithoutAttributesInput | null
}
export type AttributeUpdateInputInputObject =
  | Extract<keyof AttributeUpdateInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'products', alias?: string  } 
  
export interface ProductUpdateManyWithoutAttributesInput {
  create?: ProductCreateWithoutAttributesInput[]
  delete?: ProductWhereUniqueInput[]
  connect?: ProductWhereUniqueInput[]
  set?: ProductWhereUniqueInput[]
  disconnect?: ProductWhereUniqueInput[]
  update?: ProductUpdateWithWhereUniqueWithoutAttributesInput[]
  upsert?: ProductUpsertWithWhereUniqueWithoutAttributesInput[]
  deleteMany?: ProductScalarWhereInput[]
  updateMany?: ProductUpdateManyWithWhereNestedInput[]
}
export type ProductUpdateManyWithoutAttributesInputInputObject =
  | Extract<keyof ProductUpdateManyWithoutAttributesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProductUpdateWithWhereUniqueWithoutAttributesInput {
  where?: ProductWhereUniqueInput
  data?: ProductUpdateWithoutAttributesDataInput
}
export type ProductUpdateWithWhereUniqueWithoutAttributesInputInputObject =
  | Extract<keyof ProductUpdateWithWhereUniqueWithoutAttributesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProductUpdateWithoutAttributesDataInput {
  slug?: string | null
  name?: string | null
  brand?: BrandUpdateOneRequiredWithoutProductsInput | null
  description?: string | null
  type?: ProductTypeUpdateOneInput | null
  thumbnail?: ImageUpdateOneRequiredInput | null
  variants?: VariantUpdateManyInput | null
  collections?: CollectionUpdateManyWithoutProductsInput | null
}
export type ProductUpdateWithoutAttributesDataInputInputObject =
  | Extract<keyof ProductUpdateWithoutAttributesDataInput, string>
  | { name: 'slug', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'brand', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'thumbnail', alias?: string  } 
  | { name: 'variants', alias?: string  } 
  | { name: 'collections', alias?: string  } 
  
export interface ProductUpsertWithWhereUniqueWithoutAttributesInput {
  where?: ProductWhereUniqueInput
  update?: ProductUpdateWithoutAttributesDataInput
  create?: ProductCreateWithoutAttributesInput
}
export type ProductUpsertWithWhereUniqueWithoutAttributesInputInputObject =
  | Extract<keyof ProductUpsertWithWhereUniqueWithoutAttributesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AttributeUpdateManyMutationInput {
  key?: string | null
  value?: string | null
}
export type AttributeUpdateManyMutationInputInputObject =
  | Extract<keyof AttributeUpdateManyMutationInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface OptionValueUpdateInput {
  name?: string | null
  option?: OptionUpdateOneRequiredWithoutValuesInput | null
}
export type OptionValueUpdateInputInputObject =
  | Extract<keyof OptionValueUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'option', alias?: string  } 
  
export interface OptionValueUpdateManyMutationInput {
  name?: string | null
}
export type OptionValueUpdateManyMutationInputInputObject =
  | Extract<keyof OptionValueUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface OptionCreateInput {
  name?: string
  isColor?: boolean
  values?: OptionValueCreateManyWithoutOptionInput | null
}
export type OptionCreateInputInputObject =
  | Extract<keyof OptionCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isColor', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface OptionValueCreateManyWithoutOptionInput {
  create?: OptionValueCreateWithoutOptionInput[]
  connect?: OptionValueWhereUniqueInput[]
}
export type OptionValueCreateManyWithoutOptionInputInputObject =
  | Extract<keyof OptionValueCreateManyWithoutOptionInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OptionValueCreateWithoutOptionInput {
  name?: string
}
export type OptionValueCreateWithoutOptionInputInputObject =
  | Extract<keyof OptionValueCreateWithoutOptionInput, string>
  | { name: 'name', alias?: string  } 
  
export interface OptionUpdateInput {
  name?: string | null
  isColor?: boolean | null
  values?: OptionValueUpdateManyWithoutOptionInput | null
}
export type OptionUpdateInputInputObject =
  | Extract<keyof OptionUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isColor', alias?: string  } 
  | { name: 'values', alias?: string  } 
  
export interface OptionValueUpdateManyWithoutOptionInput {
  create?: OptionValueCreateWithoutOptionInput[]
  delete?: OptionValueWhereUniqueInput[]
  connect?: OptionValueWhereUniqueInput[]
  set?: OptionValueWhereUniqueInput[]
  disconnect?: OptionValueWhereUniqueInput[]
  update?: OptionValueUpdateWithWhereUniqueWithoutOptionInput[]
  upsert?: OptionValueUpsertWithWhereUniqueWithoutOptionInput[]
  deleteMany?: OptionValueScalarWhereInput[]
  updateMany?: OptionValueUpdateManyWithWhereNestedInput[]
}
export type OptionValueUpdateManyWithoutOptionInputInputObject =
  | Extract<keyof OptionValueUpdateManyWithoutOptionInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OptionValueUpdateWithWhereUniqueWithoutOptionInput {
  where?: OptionValueWhereUniqueInput
  data?: OptionValueUpdateWithoutOptionDataInput
}
export type OptionValueUpdateWithWhereUniqueWithoutOptionInputInputObject =
  | Extract<keyof OptionValueUpdateWithWhereUniqueWithoutOptionInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OptionValueUpdateWithoutOptionDataInput {
  name?: string | null
}
export type OptionValueUpdateWithoutOptionDataInputInputObject =
  | Extract<keyof OptionValueUpdateWithoutOptionDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface OptionValueUpsertWithWhereUniqueWithoutOptionInput {
  where?: OptionValueWhereUniqueInput
  update?: OptionValueUpdateWithoutOptionDataInput
  create?: OptionValueCreateWithoutOptionInput
}
export type OptionValueUpsertWithWhereUniqueWithoutOptionInputInputObject =
  | Extract<keyof OptionValueUpsertWithWhereUniqueWithoutOptionInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OptionUpdateManyMutationInput {
  name?: string | null
  isColor?: boolean | null
}
export type OptionUpdateManyMutationInputInputObject =
  | Extract<keyof OptionUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isColor', alias?: string  } 
  
export interface VariantUpdateInput {
  optionValues?: OptionValueUpdateManyInput | null
  price?: number | null
  availableForSale?: boolean | null
  sku?: string | null
  images?: ImageUpdateManyInput | null
}
export type VariantUpdateInputInputObject =
  | Extract<keyof VariantUpdateInput, string>
  | { name: 'optionValues', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'availableForSale', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface VariantUpdateManyMutationInput {
  price?: number | null
  availableForSale?: boolean | null
  sku?: string | null
}
export type VariantUpdateManyMutationInputInputObject =
  | Extract<keyof VariantUpdateManyMutationInput, string>
  | { name: 'price', alias?: string  } 
  | { name: 'availableForSale', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface ImageUpdateInput {
  url?: string | null
}
export type ImageUpdateInputInputObject =
  | Extract<keyof ImageUpdateInput, string>
  | { name: 'url', alias?: string  } 
  
export interface ImageUpdateManyMutationInput {
  url?: string | null
}
export type ImageUpdateManyMutationInputInputObject =
  | Extract<keyof ImageUpdateManyMutationInput, string>
  | { name: 'url', alias?: string  } 
  
export interface OrderCreateInput {
  items?: OrderLineItemCreateManyInput | null
  customer?: UserCreateOneWithoutOrdersInput
  subTotalBeforeTax?: number
  subTotal?: number
  payment?: PaymentCreateOneWithoutOrderInput
  state?: prisma.OrderState
}
export type OrderCreateInputInputObject =
  | Extract<keyof OrderCreateInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'payment', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface OrderLineItemCreateManyInput {
  create?: OrderLineItemCreateInput[]
  connect?: OrderLineItemWhereUniqueInput[]
}
export type OrderLineItemCreateManyInputInputObject =
  | Extract<keyof OrderLineItemCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderLineItemCreateInput {
  owner?: UserCreateOneInput | null
  image?: ImageCreateOneInput
  quantity?: number
  unitPrice?: number
  sku?: string | null
  orderOptionValues?: OrderOptionValuesCreateManyInput | null
}
export type OrderLineItemCreateInputInputObject =
  | Extract<keyof OrderLineItemCreateInput, string>
  | { name: 'owner', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'orderOptionValues', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateInput {
  orders?: OrderCreateManyWithoutCustomerInput | null
  cart?: VariantCreateManyInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'orders', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  
export interface OrderCreateManyWithoutCustomerInput {
  create?: OrderCreateWithoutCustomerInput[]
  connect?: OrderWhereUniqueInput[]
}
export type OrderCreateManyWithoutCustomerInputInputObject =
  | Extract<keyof OrderCreateManyWithoutCustomerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderCreateWithoutCustomerInput {
  items?: OrderLineItemCreateManyInput | null
  subTotalBeforeTax?: number
  subTotal?: number
  payment?: PaymentCreateOneWithoutOrderInput
  state?: prisma.OrderState
}
export type OrderCreateWithoutCustomerInputInputObject =
  | Extract<keyof OrderCreateWithoutCustomerInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'payment', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface PaymentCreateOneWithoutOrderInput {
  create?: PaymentCreateWithoutOrderInput | null
  connect?: PaymentWhereUniqueInput | null
}
export type PaymentCreateOneWithoutOrderInputInputObject =
  | Extract<keyof PaymentCreateOneWithoutOrderInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PaymentCreateWithoutOrderInput {
  method?: prisma.PaymentMethod
  amount?: number
  state?: prisma.PaymentState
  currencyCode?: prisma.CurrencyCode
}
export type PaymentCreateWithoutOrderInputInputObject =
  | Extract<keyof PaymentCreateWithoutOrderInput, string>
  | { name: 'method', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'currencyCode', alias?: string  } 
  
export interface OrderOptionValuesCreateManyInput {
  create?: OrderOptionValuesCreateInput[]
  connect?: OrderOptionValuesWhereUniqueInput[]
}
export type OrderOptionValuesCreateManyInputInputObject =
  | Extract<keyof OrderOptionValuesCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderOptionValuesCreateInput {
  optionName?: string
  optionValue?: string
}
export type OrderOptionValuesCreateInputInputObject =
  | Extract<keyof OrderOptionValuesCreateInput, string>
  | { name: 'optionName', alias?: string  } 
  | { name: 'optionValue', alias?: string  } 
  
export interface UserCreateOneWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutOrdersInputInputObject =
  | Extract<keyof UserCreateOneWithoutOrdersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutOrdersInput {
  cart?: VariantCreateManyInput | null
}
export type UserCreateWithoutOrdersInputInputObject =
  | Extract<keyof UserCreateWithoutOrdersInput, string>
  | { name: 'cart', alias?: string  } 
  
export interface OrderUpdateInput {
  items?: OrderLineItemUpdateManyInput | null
  customer?: UserUpdateOneRequiredWithoutOrdersInput | null
  subTotalBeforeTax?: number | null
  subTotal?: number | null
  payment?: PaymentUpdateOneRequiredWithoutOrderInput | null
  state?: prisma.OrderState | null
}
export type OrderUpdateInputInputObject =
  | Extract<keyof OrderUpdateInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'payment', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface OrderLineItemUpdateManyInput {
  create?: OrderLineItemCreateInput[]
  update?: OrderLineItemUpdateWithWhereUniqueNestedInput[]
  upsert?: OrderLineItemUpsertWithWhereUniqueNestedInput[]
  delete?: OrderLineItemWhereUniqueInput[]
  connect?: OrderLineItemWhereUniqueInput[]
  set?: OrderLineItemWhereUniqueInput[]
  disconnect?: OrderLineItemWhereUniqueInput[]
  deleteMany?: OrderLineItemScalarWhereInput[]
  updateMany?: OrderLineItemUpdateManyWithWhereNestedInput[]
}
export type OrderLineItemUpdateManyInputInputObject =
  | Extract<keyof OrderLineItemUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OrderLineItemUpdateWithWhereUniqueNestedInput {
  where?: OrderLineItemWhereUniqueInput
  data?: OrderLineItemUpdateDataInput
}
export type OrderLineItemUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof OrderLineItemUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderLineItemUpdateDataInput {
  owner?: UserUpdateOneInput | null
  image?: ImageUpdateOneRequiredInput | null
  quantity?: number | null
  unitPrice?: number | null
  sku?: string | null
  orderOptionValues?: OrderOptionValuesUpdateManyInput | null
}
export type OrderLineItemUpdateDataInputInputObject =
  | Extract<keyof OrderLineItemUpdateDataInput, string>
  | { name: 'owner', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'orderOptionValues', alias?: string  } 
  
export interface UserUpdateOneInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneInputInputObject =
  | Extract<keyof UserUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  orders?: OrderUpdateManyWithoutCustomerInput | null
  cart?: VariantUpdateManyInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'orders', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  
export interface OrderUpdateManyWithoutCustomerInput {
  create?: OrderCreateWithoutCustomerInput[]
  delete?: OrderWhereUniqueInput[]
  connect?: OrderWhereUniqueInput[]
  set?: OrderWhereUniqueInput[]
  disconnect?: OrderWhereUniqueInput[]
  update?: OrderUpdateWithWhereUniqueWithoutCustomerInput[]
  upsert?: OrderUpsertWithWhereUniqueWithoutCustomerInput[]
  deleteMany?: OrderScalarWhereInput[]
  updateMany?: OrderUpdateManyWithWhereNestedInput[]
}
export type OrderUpdateManyWithoutCustomerInputInputObject =
  | Extract<keyof OrderUpdateManyWithoutCustomerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where?: OrderWhereUniqueInput
  data?: OrderUpdateWithoutCustomerDataInput
}
export type OrderUpdateWithWhereUniqueWithoutCustomerInputInputObject =
  | Extract<keyof OrderUpdateWithWhereUniqueWithoutCustomerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderUpdateWithoutCustomerDataInput {
  items?: OrderLineItemUpdateManyInput | null
  subTotalBeforeTax?: number | null
  subTotal?: number | null
  payment?: PaymentUpdateOneRequiredWithoutOrderInput | null
  state?: prisma.OrderState | null
}
export type OrderUpdateWithoutCustomerDataInputInputObject =
  | Extract<keyof OrderUpdateWithoutCustomerDataInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'payment', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface PaymentUpdateOneRequiredWithoutOrderInput {
  create?: PaymentCreateWithoutOrderInput | null
  update?: PaymentUpdateWithoutOrderDataInput | null
  upsert?: PaymentUpsertWithoutOrderInput | null
  connect?: PaymentWhereUniqueInput | null
}
export type PaymentUpdateOneRequiredWithoutOrderInputInputObject =
  | Extract<keyof PaymentUpdateOneRequiredWithoutOrderInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PaymentUpdateWithoutOrderDataInput {
  method?: prisma.PaymentMethod | null
  amount?: number | null
  state?: prisma.PaymentState | null
  currencyCode?: prisma.CurrencyCode | null
}
export type PaymentUpdateWithoutOrderDataInputInputObject =
  | Extract<keyof PaymentUpdateWithoutOrderDataInput, string>
  | { name: 'method', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'currencyCode', alias?: string  } 
  
export interface PaymentUpsertWithoutOrderInput {
  update?: PaymentUpdateWithoutOrderDataInput
  create?: PaymentCreateWithoutOrderInput
}
export type PaymentUpsertWithoutOrderInputInputObject =
  | Extract<keyof PaymentUpsertWithoutOrderInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where?: OrderWhereUniqueInput
  update?: OrderUpdateWithoutCustomerDataInput
  create?: OrderCreateWithoutCustomerInput
}
export type OrderUpsertWithWhereUniqueWithoutCustomerInputInputObject =
  | Extract<keyof OrderUpsertWithWhereUniqueWithoutCustomerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  subTotalBeforeTax?: number | null
  subTotalBeforeTax_not?: number | null
  subTotalBeforeTax_in?: number[]
  subTotalBeforeTax_not_in?: number[]
  subTotalBeforeTax_lt?: number | null
  subTotalBeforeTax_lte?: number | null
  subTotalBeforeTax_gt?: number | null
  subTotalBeforeTax_gte?: number | null
  subTotal?: number | null
  subTotal_not?: number | null
  subTotal_in?: number[]
  subTotal_not_in?: number[]
  subTotal_lt?: number | null
  subTotal_lte?: number | null
  subTotal_gt?: number | null
  subTotal_gte?: number | null
  state?: prisma.OrderState | null
  state_not?: prisma.OrderState | null
  state_in?: prisma.OrderState[]
  state_not_in?: prisma.OrderState[]
  AND?: OrderScalarWhereInput[]
  OR?: OrderScalarWhereInput[]
  NOT?: OrderScalarWhereInput[]
}
export type OrderScalarWhereInputInputObject =
  | Extract<keyof OrderScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotalBeforeTax_not', alias?: string  } 
  | { name: 'subTotalBeforeTax_in', alias?: string  } 
  | { name: 'subTotalBeforeTax_not_in', alias?: string  } 
  | { name: 'subTotalBeforeTax_lt', alias?: string  } 
  | { name: 'subTotalBeforeTax_lte', alias?: string  } 
  | { name: 'subTotalBeforeTax_gt', alias?: string  } 
  | { name: 'subTotalBeforeTax_gte', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'subTotal_not', alias?: string  } 
  | { name: 'subTotal_in', alias?: string  } 
  | { name: 'subTotal_not_in', alias?: string  } 
  | { name: 'subTotal_lt', alias?: string  } 
  | { name: 'subTotal_lte', alias?: string  } 
  | { name: 'subTotal_gt', alias?: string  } 
  | { name: 'subTotal_gte', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderUpdateManyWithWhereNestedInput {
  where?: OrderScalarWhereInput
  data?: OrderUpdateManyDataInput
}
export type OrderUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof OrderUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderUpdateManyDataInput {
  subTotalBeforeTax?: number | null
  subTotal?: number | null
  state?: prisma.OrderState | null
}
export type OrderUpdateManyDataInputInputObject =
  | Extract<keyof OrderUpdateManyDataInput, string>
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderOptionValuesUpdateManyInput {
  create?: OrderOptionValuesCreateInput[]
  update?: OrderOptionValuesUpdateWithWhereUniqueNestedInput[]
  upsert?: OrderOptionValuesUpsertWithWhereUniqueNestedInput[]
  delete?: OrderOptionValuesWhereUniqueInput[]
  connect?: OrderOptionValuesWhereUniqueInput[]
  set?: OrderOptionValuesWhereUniqueInput[]
  disconnect?: OrderOptionValuesWhereUniqueInput[]
  deleteMany?: OrderOptionValuesScalarWhereInput[]
  updateMany?: OrderOptionValuesUpdateManyWithWhereNestedInput[]
}
export type OrderOptionValuesUpdateManyInputInputObject =
  | Extract<keyof OrderOptionValuesUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OrderOptionValuesUpdateWithWhereUniqueNestedInput {
  where?: OrderOptionValuesWhereUniqueInput
  data?: OrderOptionValuesUpdateDataInput
}
export type OrderOptionValuesUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof OrderOptionValuesUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderOptionValuesUpdateDataInput {
  optionName?: string | null
  optionValue?: string | null
}
export type OrderOptionValuesUpdateDataInputInputObject =
  | Extract<keyof OrderOptionValuesUpdateDataInput, string>
  | { name: 'optionName', alias?: string  } 
  | { name: 'optionValue', alias?: string  } 
  
export interface OrderOptionValuesUpsertWithWhereUniqueNestedInput {
  where?: OrderOptionValuesWhereUniqueInput
  update?: OrderOptionValuesUpdateDataInput
  create?: OrderOptionValuesCreateInput
}
export type OrderOptionValuesUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof OrderOptionValuesUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderOptionValuesScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  optionName?: string | null
  optionName_not?: string | null
  optionName_in?: string[]
  optionName_not_in?: string[]
  optionName_lt?: string | null
  optionName_lte?: string | null
  optionName_gt?: string | null
  optionName_gte?: string | null
  optionName_contains?: string | null
  optionName_not_contains?: string | null
  optionName_starts_with?: string | null
  optionName_not_starts_with?: string | null
  optionName_ends_with?: string | null
  optionName_not_ends_with?: string | null
  optionValue?: string | null
  optionValue_not?: string | null
  optionValue_in?: string[]
  optionValue_not_in?: string[]
  optionValue_lt?: string | null
  optionValue_lte?: string | null
  optionValue_gt?: string | null
  optionValue_gte?: string | null
  optionValue_contains?: string | null
  optionValue_not_contains?: string | null
  optionValue_starts_with?: string | null
  optionValue_not_starts_with?: string | null
  optionValue_ends_with?: string | null
  optionValue_not_ends_with?: string | null
  AND?: OrderOptionValuesScalarWhereInput[]
  OR?: OrderOptionValuesScalarWhereInput[]
  NOT?: OrderOptionValuesScalarWhereInput[]
}
export type OrderOptionValuesScalarWhereInputInputObject =
  | Extract<keyof OrderOptionValuesScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'optionName', alias?: string  } 
  | { name: 'optionName_not', alias?: string  } 
  | { name: 'optionName_in', alias?: string  } 
  | { name: 'optionName_not_in', alias?: string  } 
  | { name: 'optionName_lt', alias?: string  } 
  | { name: 'optionName_lte', alias?: string  } 
  | { name: 'optionName_gt', alias?: string  } 
  | { name: 'optionName_gte', alias?: string  } 
  | { name: 'optionName_contains', alias?: string  } 
  | { name: 'optionName_not_contains', alias?: string  } 
  | { name: 'optionName_starts_with', alias?: string  } 
  | { name: 'optionName_not_starts_with', alias?: string  } 
  | { name: 'optionName_ends_with', alias?: string  } 
  | { name: 'optionName_not_ends_with', alias?: string  } 
  | { name: 'optionValue', alias?: string  } 
  | { name: 'optionValue_not', alias?: string  } 
  | { name: 'optionValue_in', alias?: string  } 
  | { name: 'optionValue_not_in', alias?: string  } 
  | { name: 'optionValue_lt', alias?: string  } 
  | { name: 'optionValue_lte', alias?: string  } 
  | { name: 'optionValue_gt', alias?: string  } 
  | { name: 'optionValue_gte', alias?: string  } 
  | { name: 'optionValue_contains', alias?: string  } 
  | { name: 'optionValue_not_contains', alias?: string  } 
  | { name: 'optionValue_starts_with', alias?: string  } 
  | { name: 'optionValue_not_starts_with', alias?: string  } 
  | { name: 'optionValue_ends_with', alias?: string  } 
  | { name: 'optionValue_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderOptionValuesUpdateManyWithWhereNestedInput {
  where?: OrderOptionValuesScalarWhereInput
  data?: OrderOptionValuesUpdateManyDataInput
}
export type OrderOptionValuesUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof OrderOptionValuesUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderOptionValuesUpdateManyDataInput {
  optionName?: string | null
  optionValue?: string | null
}
export type OrderOptionValuesUpdateManyDataInputInputObject =
  | Extract<keyof OrderOptionValuesUpdateManyDataInput, string>
  | { name: 'optionName', alias?: string  } 
  | { name: 'optionValue', alias?: string  } 
  
export interface OrderLineItemUpsertWithWhereUniqueNestedInput {
  where?: OrderLineItemWhereUniqueInput
  update?: OrderLineItemUpdateDataInput
  create?: OrderLineItemCreateInput
}
export type OrderLineItemUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof OrderLineItemUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderLineItemScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  unitPrice?: number | null
  unitPrice_not?: number | null
  unitPrice_in?: number[]
  unitPrice_not_in?: number[]
  unitPrice_lt?: number | null
  unitPrice_lte?: number | null
  unitPrice_gt?: number | null
  unitPrice_gte?: number | null
  sku?: string | null
  sku_not?: string | null
  sku_in?: string[]
  sku_not_in?: string[]
  sku_lt?: string | null
  sku_lte?: string | null
  sku_gt?: string | null
  sku_gte?: string | null
  sku_contains?: string | null
  sku_not_contains?: string | null
  sku_starts_with?: string | null
  sku_not_starts_with?: string | null
  sku_ends_with?: string | null
  sku_not_ends_with?: string | null
  AND?: OrderLineItemScalarWhereInput[]
  OR?: OrderLineItemScalarWhereInput[]
  NOT?: OrderLineItemScalarWhereInput[]
}
export type OrderLineItemScalarWhereInputInputObject =
  | Extract<keyof OrderLineItemScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'unitPrice_not', alias?: string  } 
  | { name: 'unitPrice_in', alias?: string  } 
  | { name: 'unitPrice_not_in', alias?: string  } 
  | { name: 'unitPrice_lt', alias?: string  } 
  | { name: 'unitPrice_lte', alias?: string  } 
  | { name: 'unitPrice_gt', alias?: string  } 
  | { name: 'unitPrice_gte', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'sku_not', alias?: string  } 
  | { name: 'sku_in', alias?: string  } 
  | { name: 'sku_not_in', alias?: string  } 
  | { name: 'sku_lt', alias?: string  } 
  | { name: 'sku_lte', alias?: string  } 
  | { name: 'sku_gt', alias?: string  } 
  | { name: 'sku_gte', alias?: string  } 
  | { name: 'sku_contains', alias?: string  } 
  | { name: 'sku_not_contains', alias?: string  } 
  | { name: 'sku_starts_with', alias?: string  } 
  | { name: 'sku_not_starts_with', alias?: string  } 
  | { name: 'sku_ends_with', alias?: string  } 
  | { name: 'sku_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderLineItemUpdateManyWithWhereNestedInput {
  where?: OrderLineItemScalarWhereInput
  data?: OrderLineItemUpdateManyDataInput
}
export type OrderLineItemUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof OrderLineItemUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderLineItemUpdateManyDataInput {
  quantity?: number | null
  unitPrice?: number | null
  sku?: string | null
}
export type OrderLineItemUpdateManyDataInputInputObject =
  | Extract<keyof OrderLineItemUpdateManyDataInput, string>
  | { name: 'quantity', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput | null
  update?: UserUpdateWithoutOrdersDataInput | null
  upsert?: UserUpsertWithoutOrdersInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutOrdersInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutOrdersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutOrdersDataInput {
  cart?: VariantUpdateManyInput | null
}
export type UserUpdateWithoutOrdersDataInputInputObject =
  | Extract<keyof UserUpdateWithoutOrdersDataInput, string>
  | { name: 'cart', alias?: string  } 
  
export interface UserUpsertWithoutOrdersInput {
  update?: UserUpdateWithoutOrdersDataInput
  create?: UserCreateWithoutOrdersInput
}
export type UserUpsertWithoutOrdersInputInputObject =
  | Extract<keyof UserUpsertWithoutOrdersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderUpdateManyMutationInput {
  subTotalBeforeTax?: number | null
  subTotal?: number | null
  state?: prisma.OrderState | null
}
export type OrderUpdateManyMutationInputInputObject =
  | Extract<keyof OrderUpdateManyMutationInput, string>
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface OrderLineItemUpdateInput {
  owner?: UserUpdateOneInput | null
  image?: ImageUpdateOneRequiredInput | null
  quantity?: number | null
  unitPrice?: number | null
  sku?: string | null
  orderOptionValues?: OrderOptionValuesUpdateManyInput | null
}
export type OrderLineItemUpdateInputInputObject =
  | Extract<keyof OrderLineItemUpdateInput, string>
  | { name: 'owner', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  | { name: 'orderOptionValues', alias?: string  } 
  
export interface OrderLineItemUpdateManyMutationInput {
  quantity?: number | null
  unitPrice?: number | null
  sku?: string | null
}
export type OrderLineItemUpdateManyMutationInputInputObject =
  | Extract<keyof OrderLineItemUpdateManyMutationInput, string>
  | { name: 'quantity', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'sku', alias?: string  } 
  
export interface OrderOptionValuesUpdateInput {
  optionName?: string | null
  optionValue?: string | null
}
export type OrderOptionValuesUpdateInputInputObject =
  | Extract<keyof OrderOptionValuesUpdateInput, string>
  | { name: 'optionName', alias?: string  } 
  | { name: 'optionValue', alias?: string  } 
  
export interface OrderOptionValuesUpdateManyMutationInput {
  optionName?: string | null
  optionValue?: string | null
}
export type OrderOptionValuesUpdateManyMutationInputInputObject =
  | Extract<keyof OrderOptionValuesUpdateManyMutationInput, string>
  | { name: 'optionName', alias?: string  } 
  | { name: 'optionValue', alias?: string  } 
  
export interface PaymentCreateInput {
  method?: prisma.PaymentMethod
  amount?: number
  state?: prisma.PaymentState
  order?: OrderCreateOneWithoutPaymentInput
  currencyCode?: prisma.CurrencyCode
}
export type PaymentCreateInputInputObject =
  | Extract<keyof PaymentCreateInput, string>
  | { name: 'method', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'currencyCode', alias?: string  } 
  
export interface OrderCreateOneWithoutPaymentInput {
  create?: OrderCreateWithoutPaymentInput | null
  connect?: OrderWhereUniqueInput | null
}
export type OrderCreateOneWithoutPaymentInputInputObject =
  | Extract<keyof OrderCreateOneWithoutPaymentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderCreateWithoutPaymentInput {
  items?: OrderLineItemCreateManyInput | null
  customer?: UserCreateOneWithoutOrdersInput
  subTotalBeforeTax?: number
  subTotal?: number
  state?: prisma.OrderState
}
export type OrderCreateWithoutPaymentInputInputObject =
  | Extract<keyof OrderCreateWithoutPaymentInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface PaymentUpdateInput {
  method?: prisma.PaymentMethod | null
  amount?: number | null
  state?: prisma.PaymentState | null
  order?: OrderUpdateOneRequiredWithoutPaymentInput | null
  currencyCode?: prisma.CurrencyCode | null
}
export type PaymentUpdateInputInputObject =
  | Extract<keyof PaymentUpdateInput, string>
  | { name: 'method', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'currencyCode', alias?: string  } 
  
export interface OrderUpdateOneRequiredWithoutPaymentInput {
  create?: OrderCreateWithoutPaymentInput | null
  update?: OrderUpdateWithoutPaymentDataInput | null
  upsert?: OrderUpsertWithoutPaymentInput | null
  connect?: OrderWhereUniqueInput | null
}
export type OrderUpdateOneRequiredWithoutPaymentInputInputObject =
  | Extract<keyof OrderUpdateOneRequiredWithoutPaymentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderUpdateWithoutPaymentDataInput {
  items?: OrderLineItemUpdateManyInput | null
  customer?: UserUpdateOneRequiredWithoutOrdersInput | null
  subTotalBeforeTax?: number | null
  subTotal?: number | null
  state?: prisma.OrderState | null
}
export type OrderUpdateWithoutPaymentDataInputInputObject =
  | Extract<keyof OrderUpdateWithoutPaymentDataInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'subTotalBeforeTax', alias?: string  } 
  | { name: 'subTotal', alias?: string  } 
  | { name: 'state', alias?: string  } 
  
export interface OrderUpsertWithoutPaymentInput {
  update?: OrderUpdateWithoutPaymentDataInput
  create?: OrderCreateWithoutPaymentInput
}
export type OrderUpsertWithoutPaymentInputInputObject =
  | Extract<keyof OrderUpsertWithoutPaymentInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PaymentUpdateManyMutationInput {
  method?: prisma.PaymentMethod | null
  amount?: number | null
  state?: prisma.PaymentState | null
  currencyCode?: prisma.CurrencyCode | null
}
export type PaymentUpdateManyMutationInputInputObject =
  | Extract<keyof PaymentUpdateManyMutationInput, string>
  | { name: 'method', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'currencyCode', alias?: string  } 
  
export interface UserUpdateInput {
  orders?: OrderUpdateManyWithoutCustomerInput | null
  cart?: VariantUpdateManyInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'orders', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  
export interface CollectionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CollectionWhereInput | null
  AND?: CollectionSubscriptionWhereInput[]
  OR?: CollectionSubscriptionWhereInput[]
  NOT?: CollectionSubscriptionWhereInput[]
}
export type CollectionSubscriptionWhereInputInputObject =
  | Extract<keyof CollectionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionRuleSetSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CollectionRuleSetWhereInput | null
  AND?: CollectionRuleSetSubscriptionWhereInput[]
  OR?: CollectionRuleSetSubscriptionWhereInput[]
  NOT?: CollectionRuleSetSubscriptionWhereInput[]
}
export type CollectionRuleSetSubscriptionWhereInputInputObject =
  | Extract<keyof CollectionRuleSetSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CollectionRuleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CollectionRuleWhereInput | null
  AND?: CollectionRuleSubscriptionWhereInput[]
  OR?: CollectionRuleSubscriptionWhereInput[]
  NOT?: CollectionRuleSubscriptionWhereInput[]
}
export type CollectionRuleSubscriptionWhereInputInputObject =
  | Extract<keyof CollectionRuleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductTypeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductTypeWhereInput | null
  AND?: ProductTypeSubscriptionWhereInput[]
  OR?: ProductTypeSubscriptionWhereInput[]
  NOT?: ProductTypeSubscriptionWhereInput[]
}
export type ProductTypeSubscriptionWhereInputInputObject =
  | Extract<keyof ProductTypeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProductSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProductWhereInput | null
  AND?: ProductSubscriptionWhereInput[]
  OR?: ProductSubscriptionWhereInput[]
  NOT?: ProductSubscriptionWhereInput[]
}
export type ProductSubscriptionWhereInputInputObject =
  | Extract<keyof ProductSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BrandSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BrandWhereInput | null
  AND?: BrandSubscriptionWhereInput[]
  OR?: BrandSubscriptionWhereInput[]
  NOT?: BrandSubscriptionWhereInput[]
}
export type BrandSubscriptionWhereInputInputObject =
  | Extract<keyof BrandSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttributeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AttributeWhereInput | null
  AND?: AttributeSubscriptionWhereInput[]
  OR?: AttributeSubscriptionWhereInput[]
  NOT?: AttributeSubscriptionWhereInput[]
}
export type AttributeSubscriptionWhereInputInputObject =
  | Extract<keyof AttributeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OptionValueSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OptionValueWhereInput | null
  AND?: OptionValueSubscriptionWhereInput[]
  OR?: OptionValueSubscriptionWhereInput[]
  NOT?: OptionValueSubscriptionWhereInput[]
}
export type OptionValueSubscriptionWhereInputInputObject =
  | Extract<keyof OptionValueSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OptionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OptionWhereInput | null
  AND?: OptionSubscriptionWhereInput[]
  OR?: OptionSubscriptionWhereInput[]
  NOT?: OptionSubscriptionWhereInput[]
}
export type OptionSubscriptionWhereInputInputObject =
  | Extract<keyof OptionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VariantSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VariantWhereInput | null
  AND?: VariantSubscriptionWhereInput[]
  OR?: VariantSubscriptionWhereInput[]
  NOT?: VariantSubscriptionWhereInput[]
}
export type VariantSubscriptionWhereInputInputObject =
  | Extract<keyof VariantSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ImageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ImageWhereInput | null
  AND?: ImageSubscriptionWhereInput[]
  OR?: ImageSubscriptionWhereInput[]
  NOT?: ImageSubscriptionWhereInput[]
}
export type ImageSubscriptionWhereInputInputObject =
  | Extract<keyof ImageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrderWhereInput | null
  AND?: OrderSubscriptionWhereInput[]
  OR?: OrderSubscriptionWhereInput[]
  NOT?: OrderSubscriptionWhereInput[]
}
export type OrderSubscriptionWhereInputInputObject =
  | Extract<keyof OrderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderLineItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrderLineItemWhereInput | null
  AND?: OrderLineItemSubscriptionWhereInput[]
  OR?: OrderLineItemSubscriptionWhereInput[]
  NOT?: OrderLineItemSubscriptionWhereInput[]
}
export type OrderLineItemSubscriptionWhereInputInputObject =
  | Extract<keyof OrderLineItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderOptionValuesSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrderOptionValuesWhereInput | null
  AND?: OrderOptionValuesSubscriptionWhereInput[]
  OR?: OrderOptionValuesSubscriptionWhereInput[]
  NOT?: OrderOptionValuesSubscriptionWhereInput[]
}
export type OrderOptionValuesSubscriptionWhereInputInputObject =
  | Extract<keyof OrderOptionValuesSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PaymentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PaymentWhereInput | null
  AND?: PaymentSubscriptionWhereInput[]
  OR?: PaymentSubscriptionWhereInput[]
  NOT?: PaymentSubscriptionWhereInput[]
}
export type PaymentSubscriptionWhereInputInputObject =
  | Extract<keyof PaymentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type CollectionRuleFieldValues =
  | 'TYPE'
  | 'TITLE'
  | 'PRICE'
  
export type CollectionRuleRelationValues =
  | 'CONTAINS'
  | 'ENDS_WITH'
  | 'EQUALS'
  | 'GREATER_THAN'
  | 'LESS_THAN'
  | 'NOT_CONTAINS'
  | 'NOT_EQUALS'
  | 'STARTS_WITH'
  
export type CollectionRuleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'field_ASC'
  | 'field_DESC'
  | 'relation_ASC'
  | 'relation_DESC'
  | 'value_ASC'
  | 'value_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProductOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'slug_ASC'
  | 'slug_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type VariantOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'availableForSale_ASC'
  | 'availableForSale_DESC'
  | 'sku_ASC'
  | 'sku_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OptionValueOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ImageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CollectionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AttributeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'key_ASC'
  | 'key_DESC'
  | 'value_ASC'
  | 'value_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CollectionRuleSetOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'appliesDisjunctively_ASC'
  | 'appliesDisjunctively_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProductTypeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BrandOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OptionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'isColor_ASC'
  | 'isColor_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PaymentMethodValues =
  | 'PAYPAL'
  | 'STRIPE'
  | 'CREDIT_CARD'
  
export type PaymentStateValues =
  | 'AUTHORIZED'
  | 'SETTLED'
  | 'DECLINED'
  | 'REFUNDED'
  | 'CANCELLED'
  
export type CurrencyCodeValues =
  | 'EUR'
  | 'USD'
  
export type OrderStateValues =
  | 'COMPLETE'
  | 'CANCELLED'
  
export type OrderLineItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'quantity_ASC'
  | 'quantity_DESC'
  | 'unitPrice_ASC'
  | 'unitPrice_DESC'
  | 'sku_ASC'
  | 'sku_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OrderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'subTotalBeforeTax_ASC'
  | 'subTotalBeforeTax_DESC'
  | 'subTotal_ASC'
  | 'subTotal_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OrderOptionValuesOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'optionName_ASC'
  | 'optionName_DESC'
  | 'optionValue_ASC'
  | 'optionValue_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PaymentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'method_ASC'
  | 'method_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'currencyCode_ASC'
  | 'currencyCode_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  