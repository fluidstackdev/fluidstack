### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Attribute {
  id: ID!
  key: String!
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]!
  value: String!
}

input AttributeWhereInput {
  AND: [AttributeWhereInput!]!
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]!
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]!
  key_not_starts_with: String
  key_starts_with: String
  NOT: [AttributeWhereInput!]!
  OR: [AttributeWhereInput!]!
  products_every: ProductWhereInput
  products_none: ProductWhereInput
  products_some: ProductWhereInput
  value: String
  value_contains: String
  value_ends_with: String
  value_gt: String
  value_gte: String
  value_in: [String!]!
  value_lt: String
  value_lte: String
  value_not: String
  value_not_contains: String
  value_not_ends_with: String
  value_not_in: [String!]!
  value_not_starts_with: String
  value_starts_with: String
}

type Brand {
  id: ID!
  name: String!
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): [Product!]!
}

type BrandConnection {
  edges: [BrandEdge!]!
  pageInfo: PageInfo!
}

type BrandEdge {
  cursor: String!
  node: Brand!
}

enum BrandOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input BrandWhereInput {
  AND: [BrandWhereInput!]!
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]!
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]!
  name_not_starts_with: String
  name_starts_with: String
  NOT: [BrandWhereInput!]!
  OR: [BrandWhereInput!]!
  products_every: ProductWhereInput
  products_none: ProductWhereInput
  products_some: ProductWhereInput
}

type Collection {
  attributes: [Attribute!]!
  brands: [Brand!]!
  id: ID!
  name: String!
  options: [Option!]!
  products: [Product!]!
  rules: CollectionRuleSet
}

type CollectionRule {
  field: CollectionRuleField!
  relation: CollectionRuleRelation!
  value: String!
}

enum CollectionRuleField {
  INVENTORY
  PRICE
  TAG
  TITLE
  TYPE
  VENDOR
}

enum CollectionRuleOrderByInput {
  createdAt_ASC
  createdAt_DESC
  field_ASC
  field_DESC
  id_ASC
  id_DESC
  relation_ASC
  relation_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

enum CollectionRuleRelation {
  CONTAINS
  ENDS_WITH
  EQUALS
  GREATER_THAN
  LESS_THAN
  NOT_CONTAINS
  NOT_EQUALS
  STARTS_WITH
}

type CollectionRuleSet {
  appliesDisjunctively: Boolean!
  rules(after: String, before: String, first: Int, last: Int, orderBy: CollectionRuleOrderByInput, skip: Int, where: CollectionRuleWhereInput): [CollectionRule!]!
}

input CollectionRuleSetWhereInput {
  AND: [CollectionRuleSetWhereInput!]!
  appliesDisjunctively: Boolean
  appliesDisjunctively_not: Boolean
  NOT: [CollectionRuleSetWhereInput!]!
  OR: [CollectionRuleSetWhereInput!]!
  rules_every: CollectionRuleWhereInput
  rules_none: CollectionRuleWhereInput
  rules_some: CollectionRuleWhereInput
}

input CollectionRuleWhereInput {
  AND: [CollectionRuleWhereInput!]!
  field: CollectionRuleField
  field_in: [CollectionRuleField!]!
  field_not: CollectionRuleField
  field_not_in: [CollectionRuleField!]!
  NOT: [CollectionRuleWhereInput!]!
  OR: [CollectionRuleWhereInput!]!
  relation: CollectionRuleRelation
  relation_in: [CollectionRuleRelation!]!
  relation_not: CollectionRuleRelation
  relation_not_in: [CollectionRuleRelation!]!
  value: String
  value_contains: String
  value_ends_with: String
  value_gt: String
  value_gte: String
  value_in: [String!]!
  value_lt: String
  value_lte: String
  value_not: String
  value_not_contains: String
  value_not_ends_with: String
  value_not_in: [String!]!
  value_not_starts_with: String
  value_starts_with: String
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]!
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]!
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]!
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CollectionWhereInput!]!
  OR: [CollectionWhereInput!]!
  products_every: ProductWhereInput
  products_none: ProductWhereInput
  products_some: ProductWhereInput
  rules: CollectionRuleSetWhereInput
}

input CreateProductInput {
  attributesIds: [UniqueInput!]!
  brand: UniqueInput!
  name: String!
  variants: [CreateVariantInput!]!
}

input CreateVariantInput {
  availableForSale: Boolean!
  optionsValueIds: [UniqueInput!]!
  price: Int!
}

type Image {
  id: ID!
  url: String!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]!
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ImageWhereInput!]!
  OR: [ImageWhereInput!]!
  url: String
  url_contains: String
  url_ends_with: String
  url_gt: String
  url_gte: String
  url_in: [String!]!
  url_lt: String
  url_lte: String
  url_not: String
  url_not_contains: String
  url_not_ends_with: String
  url_not_in: [String!]!
  url_not_starts_with: String
  url_starts_with: String
}

type Mutation {
  addProductsToCollection(collectionId: ID!, productIds: [ID!]!): Collection!
  createProduct(data: CreateProductInput!): Product!
  removeProductsFromCollection(collectionId: ID!, productIds: [ID!]!): Collection!
  updateProduct(data: UpdateProductInput!): Product!
}

type Option {
  id: ID!
  name: String!
  values(after: String, before: String, first: Int, last: Int, orderBy: OptionValueOrderByInput, skip: Int, where: OptionValueWhereInput): [OptionValue!]!
}

type OptionConnection {
  edges: [OptionEdge!]!
  pageInfo: PageInfo!
}

type OptionEdge {
  cursor: String!
  node: Option!
}

enum OptionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OptionValue {
  id: ID!
  name: String!
  option: Option!
}

enum OptionValueOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OptionValueWhereInput {
  AND: [OptionValueWhereInput!]!
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]!
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]!
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OptionValueWhereInput!]!
  option: OptionWhereInput
  OR: [OptionValueWhereInput!]!
}

input OptionWhereInput {
  AND: [OptionWhereInput!]!
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]!
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]!
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OptionWhereInput!]!
  OR: [OptionWhereInput!]!
  values_every: OptionValueWhereInput
  values_none: OptionValueWhereInput
  values_some: OptionValueWhereInput
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Product {
  brand: Brand!
  id: ID!
  name: String!
  options: [Option!]!
  variants(after: String, before: String, first: Int, last: Int, orderBy: VariantOrderByInput, skip: Int, where: VariantWhereInput): [Variant!]!
}

type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}

type ProductEdge {
  cursor: String!
  node: Product!
}

enum ProductOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ProductWhereInput {
  AND: [ProductWhereInput!]!
  attributes_every: AttributeWhereInput
  attributes_none: AttributeWhereInput
  attributes_some: AttributeWhereInput
  brand: BrandWhereInput
  collections_every: CollectionWhereInput
  collections_none: CollectionWhereInput
  collections_some: CollectionWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  image: ImageWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]!
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]!
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ProductWhereInput!]!
  OR: [ProductWhereInput!]!
  variants_every: VariantWhereInput
  variants_none: VariantWhereInput
  variants_some: VariantWhereInput
}

type Query {
  brands(after: String, before: String, first: Int, last: Int, orderBy: BrandOrderByInput, skip: Int, where: BrandWhereInput): BrandConnection!
  collection(collectionId: ID!): Collection!
  options(after: String, before: String, first: Int, last: Int, orderBy: OptionOrderByInput, skip: Int, where: OptionWhereInput): OptionConnection!
  products(after: String, before: String, first: Int, last: Int, orderBy: ProductOrderByInput, skip: Int, where: ProductWhereInput): ProductConnection!
}

input UniqueInput {
  id: ID!
}

input UpdateProductInput {
  attributesIds: [UniqueInput!]!
  brand: UniqueInput!
  id: ID!
  name: String!
  variants: [UpdateVariantInput!]!
}

input UpdateVariantInput {
  availableForSale: Boolean!
  id: ID!
  optionsValueIds: [UniqueInput!]!
  price: Int!
}

type Variant {
  availableForSale: Boolean
  id: ID!
  image: Image
  optionValues(after: String, before: String, first: Int, last: Int, orderBy: OptionValueOrderByInput, skip: Int, where: OptionValueWhereInput): [OptionValue!]!
  price: Int!
  sku: String
}

enum VariantOrderByInput {
  availableForSale_ASC
  availableForSale_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  sku_ASC
  sku_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input VariantWhereInput {
  AND: [VariantWhereInput!]!
  availableForSale: Boolean
  availableForSale_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]!
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]!
  id_not_starts_with: ID
  id_starts_with: ID
  image: ImageWhereInput
  NOT: [VariantWhereInput!]!
  optionValues_every: OptionValueWhereInput
  optionValues_none: OptionValueWhereInput
  optionValues_some: OptionValueWhereInput
  OR: [VariantWhereInput!]!
  price: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int!]!
  price_lt: Int
  price_lte: Int
  price_not: Int
  price_not_in: [Int!]!
  sku: String
  sku_contains: String
  sku_ends_with: String
  sku_gt: String
  sku_gte: String
  sku_in: [String!]!
  sku_lt: String
  sku_lte: String
  sku_not: String
  sku_not_contains: String
  sku_not_ends_with: String
  sku_not_in: [String!]!
  sku_not_starts_with: String
  sku_starts_with: String
}
